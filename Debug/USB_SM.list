
USB_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d00  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006e88  08006e88  00007e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f74  08006f74  000080fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f74  08006f74  00007f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f7c  08006f7c  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f7c  08006f7c  00007f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f80  08006f80  00007f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006f84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080fc  2**0
                  CONTENTS
 10 .bss          00001c48  200000fc  200000fc  000080fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d44  20001d44  000080fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e34d  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab7  00000000  00000000  00016479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  00018f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088d  00000000  00000000  00019ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023547  00000000  00000000  0001a355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001175f  00000000  00000000  0003d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c955c  00000000  00000000  0004effb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118557  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e60  00000000  00000000  0011859c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0011b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e70 	.word	0x08006e70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006e70 	.word	0x08006e70

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:

// CDC Transmit function
void CDC_Transmit_Data(char* data);

int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
    // HAL and system initialization
    HAL_Init();
 80004ce:	f000 fa0b 	bl	80008e8 <HAL_Init>
    SystemClock_Config();
 80004d2:	f000 f8fd 	bl	80006d0 <SystemClock_Config>
    GPIO_Init();
 80004d6:	f000 f8c3 	bl	8000660 <GPIO_Init>
    MX_USB_DEVICE_Init(); // Initialize USB device
 80004da:	f005 ff3f 	bl	800635c <MX_USB_DEVICE_Init>

    char* initMsg = "Motor Control Ready\n";
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <main+0x54>)
 80004e0:	607b      	str	r3, [r7, #4]
    CDC_Transmit_Data(initMsg); // Send an initial message to PuTTY
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f8a8 	bl	8000638 <CDC_Transmit_Data>

    // Main loop
    while (1)
    {
        // Check if a new command has been received over USB
        if (strlen((char*)buffer) > 0) {
 80004e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <main+0x58>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00c      	beq.n	800050a <main+0x42>
            // Process the received command
            Process_USB_Command(buffer, strlen((char*)buffer));
 80004f0:	480b      	ldr	r0, [pc, #44]	@ (8000520 <main+0x58>)
 80004f2:	f7ff fe69 	bl	80001c8 <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4619      	mov	r1, r3
 80004fa:	4809      	ldr	r0, [pc, #36]	@ (8000520 <main+0x58>)
 80004fc:	f000 f852 	bl	80005a4 <Process_USB_Command>

            // Clear the buffer after processing
            memset(buffer, 0, sizeof(buffer));
 8000500:	2240      	movs	r2, #64	@ 0x40
 8000502:	2100      	movs	r1, #0
 8000504:	4806      	ldr	r0, [pc, #24]	@ (8000520 <main+0x58>)
 8000506:	f006 fc67 	bl	8006dd8 <memset>
        }

        // Run the motor based on the current state
        Motor_Control(motorState);
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <main+0x5c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f80a 	bl	8000528 <Motor_Control>

        // Small delay for smoother control
        HAL_Delay(.1);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fa59 	bl	80009cc <HAL_Delay>
        if (strlen((char*)buffer) > 0) {
 800051a:	e7e5      	b.n	80004e8 <main+0x20>
 800051c:	08006e88 	.word	0x08006e88
 8000520:	2000011c 	.word	0x2000011c
 8000524:	20000118 	.word	0x20000118

08000528 <Motor_Control>:
    }
}
// Function to control motor based on its state
void Motor_Control(MotorState state)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d002      	beq.n	800053e <Motor_Control+0x16>
 8000538:	2b02      	cmp	r3, #2
 800053a:	d013      	beq.n	8000564 <Motor_Control+0x3c>
 800053c:	e025      	b.n	800058a <Motor_Control+0x62>
        case MOTOR_CW:
            // Set DIR+ high for clockwise direction
            HAL_GPIO_WritePin(MOTOR_PORT, DIR_PIN, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2108      	movs	r1, #8
 8000542:	4817      	ldr	r0, [pc, #92]	@ (80005a0 <Motor_Control+0x78>)
 8000544:	f000 fd14 	bl	8000f70 <HAL_GPIO_WritePin>

            // Generate a pulse on PUL+
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2104      	movs	r1, #4
 800054c:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <Motor_Control+0x78>)
 800054e:	f000 fd0f 	bl	8000f70 <HAL_GPIO_WritePin>
            HAL_Delay(.1);  // Short pulse
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fa3a 	bl	80009cc <HAL_Delay>
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2104      	movs	r1, #4
 800055c:	4810      	ldr	r0, [pc, #64]	@ (80005a0 <Motor_Control+0x78>)
 800055e:	f000 fd07 	bl	8000f70 <HAL_GPIO_WritePin>
            break;
 8000562:	e018      	b.n	8000596 <Motor_Control+0x6e>

        case MOTOR_CCW:
            // Set DIR+ low for counterclockwise direction
            HAL_GPIO_WritePin(MOTOR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2108      	movs	r1, #8
 8000568:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <Motor_Control+0x78>)
 800056a:	f000 fd01 	bl	8000f70 <HAL_GPIO_WritePin>

            // Generate a pulse on PUL+
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2104      	movs	r1, #4
 8000572:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <Motor_Control+0x78>)
 8000574:	f000 fcfc 	bl	8000f70 <HAL_GPIO_WritePin>
            HAL_Delay(.1);  // Short pulse
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fa27 	bl	80009cc <HAL_Delay>
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2104      	movs	r1, #4
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <Motor_Control+0x78>)
 8000584:	f000 fcf4 	bl	8000f70 <HAL_GPIO_WritePin>
            break;
 8000588:	e005      	b.n	8000596 <Motor_Control+0x6e>

        case MOTOR_STOP:
        default:
            // Stop motor (no pulses generated)
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2104      	movs	r1, #4
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <Motor_Control+0x78>)
 8000590:	f000 fcee 	bl	8000f70 <HAL_GPIO_WritePin>
            break;
 8000594:	bf00      	nop
    }
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020000 	.word	0x40020000

080005a4 <Process_USB_Command>:

// Function to process USB commands received from PuTTY
void Process_USB_Command(uint8_t* Buf, uint32_t Len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
    if (strncmp((char*)Buf, "start_cw", Len) == 0) {
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	4919      	ldr	r1, [pc, #100]	@ (8000618 <Process_USB_Command+0x74>)
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f006 fc18 	bl	8006de8 <strncmp>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d106      	bne.n	80005cc <Process_USB_Command+0x28>
        motorState = MOTOR_CW;
 80005be:	4b17      	ldr	r3, [pc, #92]	@ (800061c <Process_USB_Command+0x78>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_Data("Motor started clockwise\n");
 80005c4:	4816      	ldr	r0, [pc, #88]	@ (8000620 <Process_USB_Command+0x7c>)
 80005c6:	f000 f837 	bl	8000638 <CDC_Transmit_Data>
        CDC_Transmit_Data("Motor stopped\n");
    }
    else {
        CDC_Transmit_Data("Invalid command\n");
    }
}
 80005ca:	e020      	b.n	800060e <Process_USB_Command+0x6a>
    else if (strncmp((char*)Buf, "start_ccw", Len) == 0) {
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4915      	ldr	r1, [pc, #84]	@ (8000624 <Process_USB_Command+0x80>)
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f006 fc09 	bl	8006de8 <strncmp>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d106      	bne.n	80005ea <Process_USB_Command+0x46>
        motorState = MOTOR_CCW;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <Process_USB_Command+0x78>)
 80005de:	2202      	movs	r2, #2
 80005e0:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_Data("Motor started counterclockwise\n");
 80005e2:	4811      	ldr	r0, [pc, #68]	@ (8000628 <Process_USB_Command+0x84>)
 80005e4:	f000 f828 	bl	8000638 <CDC_Transmit_Data>
}
 80005e8:	e011      	b.n	800060e <Process_USB_Command+0x6a>
    else if (strncmp((char*)Buf, "stop", Len) == 0) {
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	490f      	ldr	r1, [pc, #60]	@ (800062c <Process_USB_Command+0x88>)
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f006 fbfa 	bl	8006de8 <strncmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d106      	bne.n	8000608 <Process_USB_Command+0x64>
        motorState = MOTOR_STOP;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <Process_USB_Command+0x78>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_Data("Motor stopped\n");
 8000600:	480b      	ldr	r0, [pc, #44]	@ (8000630 <Process_USB_Command+0x8c>)
 8000602:	f000 f819 	bl	8000638 <CDC_Transmit_Data>
}
 8000606:	e002      	b.n	800060e <Process_USB_Command+0x6a>
        CDC_Transmit_Data("Invalid command\n");
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <Process_USB_Command+0x90>)
 800060a:	f000 f815 	bl	8000638 <CDC_Transmit_Data>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	08006ea0 	.word	0x08006ea0
 800061c:	20000118 	.word	0x20000118
 8000620:	08006eac 	.word	0x08006eac
 8000624:	08006ec8 	.word	0x08006ec8
 8000628:	08006ed4 	.word	0x08006ed4
 800062c:	08006ef4 	.word	0x08006ef4
 8000630:	08006efc 	.word	0x08006efc
 8000634:	08006f0c 	.word	0x08006f0c

08000638 <CDC_Transmit_Data>:

// Function to transmit data via USB CDC to PuTTY
void CDC_Transmit_Data(char* data)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fdc1 	bl	80001c8 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29b      	uxth	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f005 ff59 	bl	8006504 <CDC_Transmit_FS>
    HAL_Delay(.1);  // Delay to ensure data transmission
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f9ba 	bl	80009cc <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <GPIO_Init>:

// GPIO initialization function
void GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIOA clock
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <GPIO_Init+0x68>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <GPIO_Init+0x68>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <GPIO_Init+0x68>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

    // Configure PUL+ and DIR+ as output
    GPIO_InitStruct.Pin = PUL_PIN | DIR_PIN;
 8000690:	230c      	movs	r3, #12
 8000692:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4809      	ldr	r0, [pc, #36]	@ (80006cc <GPIO_Init+0x6c>)
 80006a6:	f000 fac7 	bl	8000c38 <HAL_GPIO_Init>

    // Configure B1 button as input (PA0)
    GPIO_InitStruct.Pin = BUTTON_PIN;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <GPIO_Init+0x6c>)
 80006bc:	f000 fabc 	bl	8000c38 <HAL_GPIO_Init>
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <SystemClock_Config>:

// System clock configuration function (standard for STM32F407)
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fb7a 	bl	8006dd8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	@ (800079c <SystemClock_Config+0xcc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	@ (800079c <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <SystemClock_Config+0xd0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

    // Initializes the RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000740:	2310      	movs	r3, #16
 8000742:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000744:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000748:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074a:	2304      	movs	r3, #4
 800074c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800074e:	2307      	movs	r3, #7
 8000750:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fe76 	bl	8002448 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x96>
    {
        // Initialization Error
        while(1);
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <SystemClock_Config+0x92>
    }

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2102      	movs	r1, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f8d8 	bl	8002938 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xc2>
    {
        // Initialization Error
        while(1);
 800078e:	bf00      	nop
 8000790:	e7fd      	b.n	800078e <SystemClock_Config+0xbe>
    }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	@ 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <Error_Handler>:
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
    // Error handling code (infinite loop or system reset)
    while(1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x4>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ea:	2007      	movs	r0, #7
 80007ec:	f000 f9e2 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f89b 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <OTG_FS_IRQHandler+0x10>)
 8000862:	f000 fce2 	bl	800122a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20001640 	.word	0x20001640

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f006 faa3 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fdff 	bl	80004c8 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80008d8:	08006f84 	.word	0x08006f84
  ldr r2, =_sbss
 80008dc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80008e0:	20001d44 	.word	0x20001d44

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f94f 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff ff46 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f967 	bl	8000c1e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f92f 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	2000015c 	.word	0x2000015c

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000015c 	.word	0x2000015c

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	@ (8000ab0 <__NVIC_EnableIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	@ (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	@ (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff8e 	bl	8000ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff29 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff3e 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff8e 	bl	8000b08 <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5d 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff31 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	@ 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	e16b      	b.n	8000f2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 815a 	bne.w	8000f26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d005      	beq.n	8000c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d130      	bne.n	8000cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	f003 0201 	and.w	r2, r3, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d017      	beq.n	8000d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d123      	bne.n	8000d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	69b9      	ldr	r1, [r7, #24]
 8000d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0203 	and.w	r2, r3, #3
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80b4 	beq.w	8000f26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b60      	ldr	r3, [pc, #384]	@ (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b5d      	ldr	r3, [pc, #372]	@ (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dda:	4a5b      	ldr	r2, [pc, #364]	@ (8000f48 <HAL_GPIO_Init+0x310>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a52      	ldr	r2, [pc, #328]	@ (8000f4c <HAL_GPIO_Init+0x314>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d02b      	beq.n	8000e5e <HAL_GPIO_Init+0x226>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a51      	ldr	r2, [pc, #324]	@ (8000f50 <HAL_GPIO_Init+0x318>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d025      	beq.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a50      	ldr	r2, [pc, #320]	@ (8000f54 <HAL_GPIO_Init+0x31c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d01f      	beq.n	8000e56 <HAL_GPIO_Init+0x21e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4f      	ldr	r2, [pc, #316]	@ (8000f58 <HAL_GPIO_Init+0x320>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d019      	beq.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4e      	ldr	r2, [pc, #312]	@ (8000f5c <HAL_GPIO_Init+0x324>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d013      	beq.n	8000e4e <HAL_GPIO_Init+0x216>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4d      	ldr	r2, [pc, #308]	@ (8000f60 <HAL_GPIO_Init+0x328>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00d      	beq.n	8000e4a <HAL_GPIO_Init+0x212>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4c      	ldr	r2, [pc, #304]	@ (8000f64 <HAL_GPIO_Init+0x32c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d007      	beq.n	8000e46 <HAL_GPIO_Init+0x20e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4b      	ldr	r2, [pc, #300]	@ (8000f68 <HAL_GPIO_Init+0x330>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_GPIO_Init+0x20a>
 8000e3e:	2307      	movs	r3, #7
 8000e40:	e00e      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e42:	2308      	movs	r3, #8
 8000e44:	e00c      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e46:	2306      	movs	r3, #6
 8000e48:	e00a      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e008      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e52:	2303      	movs	r3, #3
 8000e54:	e004      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	f002 0203 	and.w	r2, r2, #3
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	4093      	lsls	r3, r2
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e70:	4935      	ldr	r1, [pc, #212]	@ (8000f48 <HAL_GPIO_Init+0x310>)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea2:	4a32      	ldr	r2, [pc, #200]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ecc:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f20:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <HAL_GPIO_Init+0x334>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	f67f ae90 	bls.w	8000c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021c00 	.word	0x40021c00
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e101      	b.n	80011b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 fbe0 	bl	8006794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe2:	d102      	bne.n	8000fea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 ffb1 	bl	8002f56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7c1a      	ldrb	r2, [r3, #16]
 8000ffc:	f88d 2000 	strb.w	r2, [sp]
 8001000:	3304      	adds	r3, #4
 8001002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001004:	f001 fe90 	bl	8002d28 <USB_CoreInit>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0ce      	b.n	80011b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f001 ffa9 	bl	8002f78 <USB_SetCurrentMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0bf      	b.n	80011b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e04a      	b.n	80010d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	3315      	adds	r3, #21
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3314      	adds	r3, #20
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b298      	uxth	r0, r3
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	332e      	adds	r3, #46	@ 0x2e
 800107a:	4602      	mov	r2, r0
 800107c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	3318      	adds	r3, #24
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	331c      	adds	r3, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3320      	adds	r3, #32
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3324      	adds	r3, #36	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3af      	bcc.n	800103e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e044      	b.n	800116e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	3301      	adds	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3b5      	bcc.n	80010e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1a      	ldrb	r2, [r3, #16]
 8001180:	f88d 2000 	strb.w	r2, [sp]
 8001184:	3304      	adds	r3, #4
 8001186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001188:	f001 ff42 	bl	8003010 <USB_DevInit>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00c      	b.n	80011b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 ff8c 	bl	80040ce <USB_DevDisconnect>

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_PCD_Start+0x1c>
 80011d8:	2302      	movs	r3, #2
 80011da:	e022      	b.n	8001222 <HAL_PCD_Start+0x62>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fe93 	bl	8002f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f002 ff3a 	bl	800408c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b08d      	sub	sp, #52	@ 0x34
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fff8 	bl	8004236 <USB_GetMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 848c 	bne.w	8001b66 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f002 ff5c 	bl	8004110 <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8482 	beq.w	8001b64 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 ff49 	bl	8004110 <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d107      	bne.n	8001298 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f002 0202 	and.w	r2, r2, #2
 8001296:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f002 ff37 	bl	8004110 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d161      	bne.n	8001370 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0210 	bic.w	r2, r2, #16
 80012ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 020f 	and.w	r2, r3, #15
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	0c5b      	lsrs	r3, r3, #17
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d124      	bne.n	8001332 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d035      	beq.n	8001360 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f002 fd6e 	bl	8003de8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	441a      	add	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	e016      	b.n	8001360 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	0c5b      	lsrs	r3, r3, #17
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	2b06      	cmp	r3, #6
 800133c:	d110      	bne.n	8001360 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001344:	2208      	movs	r2, #8
 8001346:	4619      	mov	r1, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f002 fd4d 	bl	8003de8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	441a      	add	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0210 	orr.w	r2, r2, #16
 800136e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fecb 	bl	8004110 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001380:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001384:	f040 80a7 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fed0 	bl	8004136 <USB_ReadDevAllOutEpInterrupt>
 8001396:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001398:	e099      	b.n	80014ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 808e 	beq.w	80014c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fef4 	bl	800419e <USB_ReadDevOutEPInterrupt>
 80013b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fea4 	bl	8002124 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2308      	movs	r3, #8
 80013f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 ff7a 	bl	80022f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2310      	movs	r3, #16
 800141a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d030      	beq.n	8001488 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	2b80      	cmp	r3, #128	@ 0x80
 8001430:	d109      	bne.n	8001446 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001444:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	3304      	adds	r3, #4
 800145a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2200      	movs	r2, #0
 8001468:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f005 faa3 	bl	80069bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	2302      	movs	r3, #2
 8001486:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	015a      	lsls	r2, r3, #5
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800149e:	461a      	mov	r2, r3
 80014a0:	2320      	movs	r3, #32
 80014a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ba:	461a      	mov	r2, r3
 80014bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f af62 	bne.w	800139a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fe18 	bl	8004110 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014ea:	f040 80db 	bne.w	80016a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fe39 	bl	800416a <USB_ReadDevAllInEpInterrupt>
 80014f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014fe:	e0cd      	b.n	800169c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80c2 	beq.w	8001690 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fe5f 	bl	80041da <USB_ReadDevInEPInterrupt>
 800151c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d057      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	2201      	movs	r2, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800153c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	69f9      	ldr	r1, [r7, #28]
 8001544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001548:	4013      	ands	r3, r2
 800154a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	799b      	ldrb	r3, [r3, #6]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d132      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3320      	adds	r3, #32
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4403      	add	r3, r0
 8001586:	331c      	adds	r3, #28
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4419      	add	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	3320      	adds	r3, #32
 800159c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d113      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3324      	adds	r3, #36	@ 0x24
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015c4:	461a      	mov	r2, r3
 80015c6:	2101      	movs	r1, #1
 80015c8:	f002 fe66 	bl	8004298 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 f96d 	bl	80068b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2308      	movs	r3, #8
 80015f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800160a:	461a      	mov	r2, r3
 800160c:	2310      	movs	r3, #16
 800160e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001626:	461a      	mov	r2, r3
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001636:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001638:	6a38      	ldr	r0, [r7, #32]
 800163a:	f001 fe4d 	bl	80032d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800163e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3310      	adds	r3, #16
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f005 f9ba 	bl	80069e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	2302      	movs	r3, #2
 800167c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fcbd 	bl	800200a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f af2e 	bne.w	8001500 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fd31 	bl	8004110 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016b8:	d122      	bne.n	8001700 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016e0:	2100      	movs	r1, #0
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fea4 	bl	8002430 <HAL_PCDEx_LPM_Callback>
 80016e8:	e002      	b.n	80016f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f005 f958 	bl	80069a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fd03 	bl	8004110 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001714:	d112      	bne.n	800173c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f005 f914 	bl	8006954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800173a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fce5 	bl	8004110 <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800174c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001750:	f040 80b7 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2110      	movs	r1, #16
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fdb2 	bl	80032d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001778:	e046      	b.n	8001808 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800177a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001786:	461a      	mov	r2, r3
 8001788:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800178c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800178e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800179e:	0151      	lsls	r1, r2, #5
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	440a      	add	r2, r1
 80017a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ba:	461a      	mov	r2, r3
 80017bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017d2:	0151      	lsls	r1, r2, #5
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	440a      	add	r2, r1
 80017d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001800:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	3301      	adds	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	791b      	ldrb	r3, [r3, #4]
 800180c:	461a      	mov	r2, r3
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	4293      	cmp	r3, r2
 8001812:	d3b2      	bcc.n	800177a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001822:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001826:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7bdb      	ldrb	r3, [r3, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d016      	beq.n	800185e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001840:	f043 030b 	orr.w	r3, r3, #11
 8001844:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001856:	f043 030b 	orr.w	r3, r3, #11
 800185a:	6453      	str	r3, [r2, #68]	@ 0x44
 800185c:	e015      	b.n	800188a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800186c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001870:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001874:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001884:	f043 030b 	orr.w	r3, r3, #11
 8001888:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001898:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800189c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ac:	461a      	mov	r2, r3
 80018ae:	f002 fcf3 	bl	8004298 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fc22 	bl	8004110 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018d6:	d123      	bne.n	8001920 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fcb8 	bl	8004252 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fd6f 	bl	80033ca <USB_GetDevSpeed>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	f001 fa0a 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001902:	461a      	mov	r2, r3
 8001904:	4620      	mov	r0, r4
 8001906:	f001 fa73 	bl	8002df0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f004 fff9 	bl	8006902 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800191e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fbf3 	bl	8004110 <USB_ReadInterrupts>
 800192a:	4603      	mov	r3, r0
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b08      	cmp	r3, #8
 8001932:	d10a      	bne.n	800194a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f004 ffd6 	bl	80068e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f002 0208 	and.w	r2, r2, #8
 8001948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fbde 	bl	8004110 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195a:	2b80      	cmp	r3, #128	@ 0x80
 800195c:	d123      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800196a:	2301      	movs	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
 800196e:	e014      	b.n	800199a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb0a 	bl	8001fa8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	3301      	adds	r3, #1
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	791b      	ldrb	r3, [r3, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d3e4      	bcc.n	8001970 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fbb0 	bl	8004110 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019ba:	d13c      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	e02b      	b.n	8001a1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3318      	adds	r3, #24
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d115      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da12      	bge.n	8001a14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3317      	adds	r3, #23
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 faca 	bl	8001fa8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	3301      	adds	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d3cd      	bcc.n	80019c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fb68 	bl	8004110 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a4a:	d156      	bne.n	8001afa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a50:	e045      	b.n	8001ade <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d12e      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da2b      	bge.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d121      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad4:	6053      	str	r3, [r2, #4]
            break;
 8001ad6:	e008      	b.n	8001aea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	791b      	ldrb	r3, [r3, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d3b3      	bcc.n	8001a52 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fb06 	bl	8004110 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0e:	d10a      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f004 ff77 	bl	8006a04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 faf0 	bl	8004110 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d115      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f004 ff67 	bl	8006a20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e000      	b.n	8001b66 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001b64:	bf00      	nop
    }
  }
}
 8001b66:	3734      	adds	r7, #52	@ 0x34
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_PCD_SetAddress+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e012      	b.n	8001bac <HAL_PCD_SetAddress+0x40>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fa4f 	bl	8004040 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	70fb      	strb	r3, [r7, #3]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	803b      	strh	r3, [r7, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da0f      	bge.n	8001bfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3310      	adds	r3, #16
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e00f      	b.n	8001c1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3304      	adds	r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c26:	883b      	ldrh	r3, [r7, #0]
 8001c28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	78ba      	ldrb	r2, [r7, #2]
 8001c34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c48:	78bb      	ldrb	r3, [r7, #2]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d102      	bne.n	8001c54 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_PCD_EP_Open+0xae>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e00e      	b.n	8001c80 <HAL_PCD_EP_Open+0xcc>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 fbcf 	bl	8003414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da0f      	bge.n	8001cbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 020f 	and.w	r2, r3, #15
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3310      	adds	r3, #16
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
 8001cba:	e00f      	b.n	8001cdc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_PCD_EP_Close+0x6e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e00e      	b.n	8001d14 <HAL_PCD_EP_Close+0x8c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fc0d 	bl	8003524 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	799b      	ldrb	r3, [r3, #6]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	799b      	ldrb	r3, [r3, #6]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6979      	ldr	r1, [r7, #20]
 8001d84:	f001 fcaa 	bl	80036dc <USB_EPStartXfer>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001db4:	681b      	ldr	r3, [r3, #0]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3310      	adds	r3, #16
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	799b      	ldrb	r3, [r3, #6]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	799b      	ldrb	r3, [r3, #6]
 8001e24:	461a      	mov	r2, r3
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	f001 fc58 	bl	80036dc <USB_EPStartXfer>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	7912      	ldrb	r2, [r2, #4]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e04f      	b.n	8001ef4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da0f      	bge.n	8001e7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3310      	adds	r3, #16
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00d      	b.n	8001e98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_EP_SetStall+0x82>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e01d      	b.n	8001ef4 <HAL_PCD_EP_SetStall+0xbe>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 ffe6 	bl	8003e98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7999      	ldrb	r1, [r3, #6]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f002 f9d7 	bl	8004298 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	7912      	ldrb	r2, [r2, #4]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e042      	b.n	8001fa0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0f      	bge.n	8001f42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3310      	adds	r3, #16
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00f      	b.n	8001f62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_PCD_EP_ClrStall+0x86>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e00e      	b.n	8001fa0 <HAL_PCD_EP_ClrStall+0xa4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68f9      	ldr	r1, [r7, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 ffef 	bl	8003f74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0c      	bge.n	8001fd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3310      	adds	r3, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e00c      	b.n	8001ff0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 fe0e 	bl	8003c18 <USB_EPStopXfer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002000:	7afb      	ldrb	r3, [r7, #11]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b08a      	sub	sp, #40	@ 0x28
 800200e:	af02      	add	r7, sp, #8
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3310      	adds	r3, #16
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	429a      	cmp	r2, r3
 800203c:	d901      	bls.n	8002042 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d902      	bls.n	800205e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3303      	adds	r3, #3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002066:	e02a      	b.n	80020be <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d902      	bls.n	8002084 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3303      	adds	r3, #3
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f001 fe63 	bl	8003d6c <USB_WritePacket>

    ep->xfer_buff  += len;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	441a      	add	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	441a      	add	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d809      	bhi.n	80020e8 <PCD_WriteEmptyTxFifo+0xde>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020dc:	429a      	cmp	r2, r3
 80020de:	d203      	bcs.n	80020e8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1bf      	bne.n	8002068 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d811      	bhi.n	8002118 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	2201      	movs	r2, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	43db      	mvns	r3, r3
 800210e:	6939      	ldr	r1, [r7, #16]
 8002110:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002114:	4013      	ands	r3, r2
 8002116:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	333c      	adds	r3, #60	@ 0x3c
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	799b      	ldrb	r3, [r3, #6]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d17b      	bne.n	8002252 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a61      	ldr	r2, [pc, #388]	@ (80022ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f240 80b9 	bls.w	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80b3 	beq.w	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800218c:	6093      	str	r3, [r2, #8]
 800218e:	e0a7      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	2320      	movs	r3, #32
 80021aa:	6093      	str	r3, [r2, #8]
 80021ac:	e098      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 8093 	bne.w	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	@ (80022ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d90f      	bls.n	80021e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021de:	6093      	str	r3, [r2, #8]
 80021e0:	e07e      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a1a      	ldr	r2, [r3, #32]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	440b      	add	r3, r1
 8002204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d114      	bne.n	8002244 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800222c:	461a      	mov	r2, r3
 800222e:	2101      	movs	r1, #1
 8002230:	f002 f832 	bl	8004298 <USB_EP0_OutStart>
 8002234:	e006      	b.n	8002244 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f004 fb16 	bl	800687c <HAL_PCD_DataOutStageCallback>
 8002250:	e046      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d124      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002270:	461a      	mov	r2, r3
 8002272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e032      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	2320      	movs	r3, #32
 8002294:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f004 faed 	bl	800687c <HAL_PCD_DataOutStageCallback>
 80022a2:	e01d      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022cc:	461a      	mov	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f001 ffe2 	bl	8004298 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f004 face 	bl	800687c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	4f54300a 	.word	0x4f54300a
 80022f0:	4f54310a 	.word	0x4f54310a

080022f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	333c      	adds	r3, #60	@ 0x3c
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a15      	ldr	r2, [pc, #84]	@ (800237c <PCD_EP_OutSetupPacket_int+0x88>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d90e      	bls.n	8002348 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002346:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f004 fa85 	bl	8006858 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <PCD_EP_OutSetupPacket_int+0x88>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d90c      	bls.n	8002370 <PCD_EP_OutSetupPacket_int+0x7c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	799b      	ldrb	r3, [r3, #6]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d108      	bne.n	8002370 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002368:	461a      	mov	r2, r3
 800236a:	2101      	movs	r1, #1
 800236c:	f001 ff94 	bl	8004298 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	4f54300a 	.word	0x4f54300a

08002380 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
 800238c:	4613      	mov	r3, r2
 800238e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800239e:	883b      	ldrh	r3, [r7, #0]
 80023a0:	0419      	lsls	r1, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ac:	e028      	b.n	8002400 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e00d      	b.n	80023de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3340      	adds	r3, #64	@ 0x40
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	3301      	adds	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3ec      	bcc.n	80023c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023e8:	883b      	ldrh	r3, [r7, #0]
 80023ea:	0418      	lsls	r0, r3, #16
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4302      	orrs	r2, r0
 80023f8:	3340      	adds	r3, #64	@ 0x40
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e267      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002466:	4b88      	ldr	r3, [pc, #544]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b82      	ldr	r3, [pc, #520]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b7e      	ldr	r3, [pc, #504]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e242      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b70      	ldr	r3, [pc, #448]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b69      	ldr	r3, [pc, #420]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a68      	ldr	r2, [pc, #416]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b66      	ldr	r3, [pc, #408]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a65      	ldr	r2, [pc, #404]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fa58 	bl	80009b4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fa54 	bl	80009b4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	@ 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e207      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5b      	ldr	r3, [pc, #364]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fa44 	bl	80009b4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fa40 	bl	80009b4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	@ 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1f3      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c7      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4937      	ldr	r1, [pc, #220]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b34      	ldr	r3, [pc, #208]	@ (800268c <HAL_RCC_OscConfig+0x244>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe f9f9 	bl	80009b4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe f9f5 	bl	80009b4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a8      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4925      	ldr	r1, [pc, #148]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_OscConfig+0x244>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe f9d8 	bl	80009b4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe f9d4 	bl	80009b4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e187      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_RCC_OscConfig+0x248>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe f9b8 	bl	80009b4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe f9b4 	bl	80009b4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e167      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_RCC_OscConfig+0x248>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7fe f9a1 	bl	80009b4 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00e      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7fe f99d 	bl	80009b4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d907      	bls.n	8002694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e150      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b88      	ldr	r3, [pc, #544]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ea      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8097 	beq.w	80027dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b81      	ldr	r3, [pc, #516]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b7d      	ldr	r3, [pc, #500]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	4a7c      	ldr	r2, [pc, #496]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ce:	4b7a      	ldr	r3, [pc, #488]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b77      	ldr	r3, [pc, #476]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b74      	ldr	r3, [pc, #464]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a73      	ldr	r2, [pc, #460]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe f95d 	bl	80009b4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe f959 	bl	80009b4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e10c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ea>
 8002724:	4b64      	ldr	r3, [pc, #400]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a63      	ldr	r2, [pc, #396]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x30c>
 800273a:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	4a5e      	ldr	r2, [pc, #376]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	@ 0x70
 8002746:	4b5c      	ldr	r3, [pc, #368]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a5b      	ldr	r2, [pc, #364]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002754:	4b58      	ldr	r3, [pc, #352]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002758:	4a57      	ldr	r2, [pc, #348]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002760:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a54      	ldr	r2, [pc, #336]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe f91e 	bl	80009b4 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe f91a 	bl	80009b4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0cb      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x334>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe f908 	bl	80009b4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe f904 	bl	80009b4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b5      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	4a38      	ldr	r2, [pc, #224]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a1 	beq.w	8002928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e6:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d05c      	beq.n	80028ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d141      	bne.n	800287e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe f8d8 	bl	80009b4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe f8d4 	bl	80009b4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e087      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	491b      	ldr	r1, [pc, #108]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe f8ad 	bl	80009b4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f8a9 	bl	80009b4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e05c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x416>
 800287c:	e054      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe f896 	bl	80009b4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f892 	bl	80009b4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e045      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e038      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x4ec>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d121      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11a      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fd ffc4 	bl	80009b4 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fd ffc0 	bl	80009b4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd ff24 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08006f64 	.word	0x08006f64
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b094      	sub	sp, #80	@ 0x50
 8002b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4b79      	ldr	r3, [pc, #484]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	f200 80e1 	bhi.w	8002cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b36:	e0db      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b73      	ldr	r3, [pc, #460]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3c:	e0db      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3e:	4b73      	ldr	r3, [pc, #460]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b42:	e0d8      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b44:	4b6f      	ldr	r3, [pc, #444]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b76:	4622      	mov	r2, r4
 8002b78:	462b      	mov	r3, r5
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b88:	0150      	lsls	r0, r2, #5
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4621      	mov	r1, r4
 8002b90:	1a51      	subs	r1, r2, r1
 8002b92:	6139      	str	r1, [r7, #16]
 8002b94:	4629      	mov	r1, r5
 8002b96:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba8:	4659      	mov	r1, fp
 8002baa:	018b      	lsls	r3, r1, #6
 8002bac:	4651      	mov	r1, sl
 8002bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb2:	4651      	mov	r1, sl
 8002bb4:	018a      	lsls	r2, r1, #6
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	eb18 0303 	adds.w	r3, r8, r3
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	462b      	mov	r3, r5
 8002be4:	eb49 0303 	adc.w	r3, r9, r3
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	024b      	lsls	r3, r1, #9
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c00:	4621      	mov	r1, r4
 8002c02:	024a      	lsls	r2, r1, #9
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c14:	f7fd fae0 	bl	80001d8 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c20:	e058      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b38      	ldr	r3, [pc, #224]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	0159      	lsls	r1, r3, #5
 8002c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c4e:	0150      	lsls	r0, r2, #5
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4641      	mov	r1, r8
 8002c56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c74:	ebb2 040a 	subs.w	r4, r2, sl
 8002c78:	eb63 050b 	sbc.w	r5, r3, fp
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	00eb      	lsls	r3, r5, #3
 8002c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8a:	00e2      	lsls	r2, r4, #3
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	4643      	mov	r3, r8
 8002c92:	18e3      	adds	r3, r4, r3
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	464b      	mov	r3, r9
 8002c98:	eb45 0303 	adc.w	r3, r5, r3
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002caa:	4629      	mov	r1, r5
 8002cac:	028b      	lsls	r3, r1, #10
 8002cae:	4621      	mov	r1, r4
 8002cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	028a      	lsls	r2, r1, #10
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	61fa      	str	r2, [r7, #28]
 8002cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc8:	f7fd fa86 	bl	80001d8 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ce4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3750      	adds	r7, #80	@ 0x50
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	@ (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000

08002d28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d28:	b084      	sub	sp, #16
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	f107 001c 	add.w	r0, r7, #28
 8002d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d123      	bne.n	8002d8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 fae8 	bl	8004354 <USB_CoreReset>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e01b      	b.n	8002dc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f001 fadc 	bl	8004354 <USB_CoreReset>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002da0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002db4:	e005      	b.n	8002dc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002dc2:	7fbb      	ldrb	r3, [r7, #30]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10b      	bne.n	8002de0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f043 0206 	orr.w	r2, r3, #6
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dec:	b004      	add	sp, #16
 8002dee:	4770      	bx	lr

08002df0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d165      	bne.n	8002ed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a41      	ldr	r2, [pc, #260]	@ (8002f0c <USB_SetTurnaroundTime+0x11c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d906      	bls.n	8002e1a <USB_SetTurnaroundTime+0x2a>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a40      	ldr	r2, [pc, #256]	@ (8002f10 <USB_SetTurnaroundTime+0x120>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d202      	bcs.n	8002e1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e14:	230f      	movs	r3, #15
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e062      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f10 <USB_SetTurnaroundTime+0x120>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d306      	bcc.n	8002e30 <USB_SetTurnaroundTime+0x40>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <USB_SetTurnaroundTime+0x124>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d202      	bcs.n	8002e30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e2a:	230e      	movs	r3, #14
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e057      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4a38      	ldr	r2, [pc, #224]	@ (8002f14 <USB_SetTurnaroundTime+0x124>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d306      	bcc.n	8002e46 <USB_SetTurnaroundTime+0x56>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a37      	ldr	r2, [pc, #220]	@ (8002f18 <USB_SetTurnaroundTime+0x128>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d202      	bcs.n	8002e46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e40:	230d      	movs	r3, #13
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e04c      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4a33      	ldr	r2, [pc, #204]	@ (8002f18 <USB_SetTurnaroundTime+0x128>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d306      	bcc.n	8002e5c <USB_SetTurnaroundTime+0x6c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4a32      	ldr	r2, [pc, #200]	@ (8002f1c <USB_SetTurnaroundTime+0x12c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e56:	230c      	movs	r3, #12
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e041      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <USB_SetTurnaroundTime+0x12c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d906      	bls.n	8002e72 <USB_SetTurnaroundTime+0x82>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a2e      	ldr	r2, [pc, #184]	@ (8002f20 <USB_SetTurnaroundTime+0x130>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d802      	bhi.n	8002e72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e6c:	230b      	movs	r3, #11
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e036      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a2a      	ldr	r2, [pc, #168]	@ (8002f20 <USB_SetTurnaroundTime+0x130>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d906      	bls.n	8002e88 <USB_SetTurnaroundTime+0x98>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4a29      	ldr	r2, [pc, #164]	@ (8002f24 <USB_SetTurnaroundTime+0x134>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e82:	230a      	movs	r3, #10
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e02b      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4a26      	ldr	r2, [pc, #152]	@ (8002f24 <USB_SetTurnaroundTime+0x134>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d906      	bls.n	8002e9e <USB_SetTurnaroundTime+0xae>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a25      	ldr	r2, [pc, #148]	@ (8002f28 <USB_SetTurnaroundTime+0x138>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d202      	bcs.n	8002e9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e98:	2309      	movs	r3, #9
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e020      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <USB_SetTurnaroundTime+0x138>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d306      	bcc.n	8002eb4 <USB_SetTurnaroundTime+0xc4>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	@ (8002f2c <USB_SetTurnaroundTime+0x13c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d802      	bhi.n	8002eb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e015      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <USB_SetTurnaroundTime+0x13c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d906      	bls.n	8002eca <USB_SetTurnaroundTime+0xda>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <USB_SetTurnaroundTime+0x140>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d202      	bcs.n	8002eca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e00a      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e007      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ed6:	2309      	movs	r3, #9
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e001      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002edc:	2309      	movs	r3, #9
 8002ede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	029b      	lsls	r3, r3, #10
 8002ef4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	00d8acbf 	.word	0x00d8acbf
 8002f10:	00e4e1c0 	.word	0x00e4e1c0
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	01067380 	.word	0x01067380
 8002f1c:	011a499f 	.word	0x011a499f
 8002f20:	01312cff 	.word	0x01312cff
 8002f24:	014ca43f 	.word	0x014ca43f
 8002f28:	016e3600 	.word	0x016e3600
 8002f2c:	01a6ab1f 	.word	0x01a6ab1f
 8002f30:	01e84800 	.word	0x01e84800

08002f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d115      	bne.n	8002fc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	f7fd fd10 	bl	80009cc <HAL_Delay>
      ms += 10U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	330a      	adds	r3, #10
 8002fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 f93f 	bl	8004236 <USB_GetMode>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d01e      	beq.n	8002ffc <USB_SetCurrentMode+0x84>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fc2:	d9f0      	bls.n	8002fa6 <USB_SetCurrentMode+0x2e>
 8002fc4:	e01a      	b.n	8002ffc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d115      	bne.n	8002ff8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f7fd fcf7 	bl	80009cc <HAL_Delay>
      ms += 10U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	330a      	adds	r3, #10
 8002fe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 f926 	bl	8004236 <USB_GetMode>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <USB_SetCurrentMode+0x84>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ff4:	d9f0      	bls.n	8002fd8 <USB_SetCurrentMode+0x60>
 8002ff6:	e001      	b.n	8002ffc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e005      	b.n	8003008 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2bc8      	cmp	r3, #200	@ 0xc8
 8003000:	d101      	bne.n	8003006 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003010:	b084      	sub	sp, #16
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800301e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e009      	b.n	8003044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3340      	adds	r3, #64	@ 0x40
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	2200      	movs	r2, #0
 800303c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3301      	adds	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0e      	cmp	r3, #14
 8003048:	d9f2      	bls.n	8003030 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800304a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11c      	bne.n	800308c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003076:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	639a      	str	r2, [r3, #56]	@ 0x38
 800308a:	e00b      	b.n	80030a4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030c0:	2100      	movs	r1, #0
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f968 	bl	8003398 <USB_SetDevSpeed>
 80030c8:	e008      	b.n	80030dc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030ca:	2101      	movs	r1, #1
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f963 	bl	8003398 <USB_SetDevSpeed>
 80030d2:	e003      	b.n	80030dc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030d4:	2103      	movs	r1, #3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f95e 	bl	8003398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030dc:	2110      	movs	r1, #16
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8fa 	bl	80032d8 <USB_FlushTxFifo>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f924 	bl	800333c <USB_FlushRxFifo>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003104:	461a      	mov	r2, r3
 8003106:	2300      	movs	r3, #0
 8003108:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003110:	461a      	mov	r2, r3
 8003112:	2300      	movs	r3, #0
 8003114:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311c:	461a      	mov	r2, r3
 800311e:	2300      	movs	r3, #0
 8003120:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	e043      	b.n	80031b0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800313a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800313e:	d118      	bne.n	8003172 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003152:	461a      	mov	r2, r3
 8003154:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e013      	b.n	8003184 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003168:	461a      	mov	r2, r3
 800316a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	e008      	b.n	8003184 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003190:	461a      	mov	r2, r3
 8003192:	2300      	movs	r3, #0
 8003194:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a2:	461a      	mov	r2, r3
 80031a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031b4:	461a      	mov	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d3b5      	bcc.n	8003128 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e043      	b.n	800324a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031d8:	d118      	bne.n	800320c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e013      	b.n	800321e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003202:	461a      	mov	r2, r3
 8003204:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e008      	b.n	800321e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003218:	461a      	mov	r2, r3
 800321a:	2300      	movs	r3, #0
 800321c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800323c:	461a      	mov	r2, r3
 800323e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3301      	adds	r3, #1
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800324e:	461a      	mov	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4293      	cmp	r3, r2
 8003254:	d3b5      	bcc.n	80031c2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003268:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003276:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003278:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <USB_DevInit+0x2c4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003298:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f043 0208 	orr.w	r2, r3, #8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d0:	b004      	add	sp, #16
 80032d2:	4770      	bx	lr
 80032d4:	803c3800 	.word	0x803c3800

080032d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032f2:	d901      	bls.n	80032f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e01b      	b.n	8003330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	daf2      	bge.n	80032e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	019b      	lsls	r3, r3, #6
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800331c:	d901      	bls.n	8003322 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e006      	b.n	8003330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d0f0      	beq.n	8003310 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003354:	d901      	bls.n	800335a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e018      	b.n	800338c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	daf2      	bge.n	8003348 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2210      	movs	r2, #16
 800336a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003378:	d901      	bls.n	800337e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e006      	b.n	800338c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b10      	cmp	r3, #16
 8003388:	d0f0      	beq.n	800336c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b087      	sub	sp, #28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0306 	and.w	r3, r3, #6
 80033e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e00a      	b.n	8003406 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d002      	beq.n	80033fc <USB_GetDevSpeed+0x32>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b06      	cmp	r3, #6
 80033fa:	d102      	bne.n	8003402 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033fc:	2302      	movs	r3, #2
 80033fe:	75fb      	strb	r3, [r7, #23]
 8003400:	e001      	b.n	8003406 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003402:	230f      	movs	r3, #15
 8003404:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d13a      	bne.n	80034a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	b29b      	uxth	r3, r3
 8003448:	68f9      	ldr	r1, [r7, #12]
 800344a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800344e:	4313      	orrs	r3, r2
 8003450:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d155      	bne.n	8003514 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	791b      	ldrb	r3, [r3, #4]
 8003482:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003484:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	059b      	lsls	r3, r3, #22
 800348a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800348c:	4313      	orrs	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	440a      	add	r2, r1
 8003496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e036      	b.n	8003514 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11a      	bne.n	8003514 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034fa:	430b      	orrs	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003512:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d161      	bne.n	8003604 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003556:	d11f      	bne.n	8003598 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	0151      	lsls	r1, r2, #5
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	440a      	add	r2, r1
 800356e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003572:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003576:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	440a      	add	r2, r1
 800358e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003592:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003596:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800359e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	2101      	movs	r1, #1
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035b8:	4013      	ands	r3, r2
 80035ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035dc:	4013      	ands	r3, r2
 80035de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	0159      	lsls	r1, r3, #5
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fa:	4619      	mov	r1, r3
 80035fc:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <USB_DeactivateEndpoint+0x1b0>)
 80035fe:	4013      	ands	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
 8003602:	e060      	b.n	80036c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800361a:	d11f      	bne.n	800365c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	440a      	add	r2, r1
 8003632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003636:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800363a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	440a      	add	r2, r1
 8003652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003656:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800365a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	43db      	mvns	r3, r3
 8003676:	68f9      	ldr	r1, [r7, #12]
 8003678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800367c:	4013      	ands	r3, r2
 800367e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	43db      	mvns	r3, r3
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036a0:	4013      	ands	r3, r2
 80036a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0159      	lsls	r1, r3, #5
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036be:	4619      	mov	r1, r3
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <USB_DeactivateEndpoint+0x1b4>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	ec337800 	.word	0xec337800
 80036d8:	eff37800 	.word	0xeff37800

080036dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	@ 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	785b      	ldrb	r3, [r3, #1]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 817f 	bne.w	80039fc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d132      	bne.n	800376c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	0151      	lsls	r1, r2, #5
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	440a      	add	r2, r1
 800371c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003720:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003724:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	0151      	lsls	r1, r2, #5
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	440a      	add	r2, r1
 8003760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003764:	0cdb      	lsrs	r3, r3, #19
 8003766:	04db      	lsls	r3, r3, #19
 8003768:	6113      	str	r3, [r2, #16]
 800376a:	e097      	b.n	800389c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003786:	0cdb      	lsrs	r3, r3, #19
 8003788:	04db      	lsls	r3, r3, #19
 800378a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	0151      	lsls	r1, r2, #5
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	440a      	add	r2, r1
 80037a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11a      	bne.n	80037ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d903      	bls.n	80037ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80037e8:	6113      	str	r3, [r2, #16]
 80037ea:	e044      	b.n	8003876 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4413      	add	r3, r2
 80037f6:	1e5a      	subs	r2, r3, #1
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	8afb      	ldrh	r3, [r7, #22]
 8003812:	04d9      	lsls	r1, r3, #19
 8003814:	4ba4      	ldr	r3, [pc, #656]	@ (8003aa8 <USB_EPStartXfer+0x3cc>)
 8003816:	400b      	ands	r3, r1
 8003818:	69b9      	ldr	r1, [r7, #24]
 800381a:	0148      	lsls	r0, r1, #5
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	4401      	add	r1, r0
 8003820:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003824:	4313      	orrs	r3, r2
 8003826:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d122      	bne.n	8003876 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800384a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800384e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	8afb      	ldrh	r3, [r7, #22]
 8003860:	075b      	lsls	r3, r3, #29
 8003862:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003866:	69b9      	ldr	r1, [r7, #24]
 8003868:	0148      	lsls	r0, r1, #5
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	4401      	add	r1, r0
 800386e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	0148      	lsls	r0, r1, #5
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	4401      	add	r1, r0
 8003894:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003898:	4313      	orrs	r3, r2
 800389a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d14b      	bne.n	800393a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b6:	461a      	mov	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	791b      	ldrb	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d128      	bne.n	8003918 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e00f      	b.n	8003918 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003916:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	440a      	add	r2, r1
 800392e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003932:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e166      	b.n	8003c08 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	0151      	lsls	r1, r2, #5
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	440a      	add	r2, r1
 8003950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003954:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003958:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	791b      	ldrb	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d015      	beq.n	800398e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 814e 	beq.w	8003c08 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	69f9      	ldr	r1, [r7, #28]
 8003984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003988:	4313      	orrs	r3, r2
 800398a:	634b      	str	r3, [r1, #52]	@ 0x34
 800398c:	e13c      	b.n	8003c08 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d110      	bne.n	80039c0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e00f      	b.n	80039e0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	68d9      	ldr	r1, [r3, #12]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	b298      	uxth	r0, r3
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4603      	mov	r3, r0
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f9b9 	bl	8003d6c <USB_WritePacket>
 80039fa:	e105      	b.n	8003c08 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a16:	0cdb      	lsrs	r3, r3, #19
 8003a18:	04db      	lsls	r3, r3, #19
 8003a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a3e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d132      	bne.n	8003aac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a74:	69b9      	ldr	r1, [r7, #24]
 8003a76:	0148      	lsls	r0, r1, #5
 8003a78:	69f9      	ldr	r1, [r7, #28]
 8003a7a:	4401      	add	r1, r0
 8003a7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003aa2:	6113      	str	r3, [r2, #16]
 8003aa4:	e062      	b.n	8003b6c <USB_EPStartXfer+0x490>
 8003aa6:	bf00      	nop
 8003aa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d123      	bne.n	8003afc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	0148      	lsls	r0, r1, #5
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	4401      	add	r1, r0
 8003ad2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003af4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003af8:	6113      	str	r3, [r2, #16]
 8003afa:	e037      	b.n	8003b6c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	1e5a      	subs	r2, r3, #1
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	8afa      	ldrh	r2, [r7, #22]
 8003b18:	fb03 f202 	mul.w	r2, r3, r2
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	8afb      	ldrh	r3, [r7, #22]
 8003b30:	04d9      	lsls	r1, r3, #19
 8003b32:	4b38      	ldr	r3, [pc, #224]	@ (8003c14 <USB_EPStartXfer+0x538>)
 8003b34:	400b      	ands	r3, r1
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	0148      	lsls	r0, r1, #5
 8003b3a:	69f9      	ldr	r1, [r7, #28]
 8003b3c:	4401      	add	r1, r0
 8003b3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b42:	4313      	orrs	r3, r2
 8003b44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	0148      	lsls	r0, r1, #5
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	4401      	add	r1, r0
 8003b64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10d      	bne.n	8003b8e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	68d9      	ldr	r1, [r3, #12]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	791b      	ldrb	r3, [r3, #4]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d128      	bne.n	8003be8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d110      	bne.n	8003bc8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00f      	b.n	8003be8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	1ff80000 	.word	0x1ff80000

08003c18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d14a      	bne.n	8003ccc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c4e:	f040 8086 	bne.w	8003d5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d902      	bls.n	8003cb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
          break;
 8003cae:	e056      	b.n	8003d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc8:	d0e7      	beq.n	8003c9a <USB_EPStopXfer+0x82>
 8003cca:	e048      	b.n	8003d5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ce4:	d13b      	bne.n	8003d5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d902      	bls.n	8003d44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
          break;
 8003d42:	e00c      	b.n	8003d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d5c:	d0e7      	beq.n	8003d2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	@ 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	71fb      	strb	r3, [r7, #7]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d123      	bne.n	8003dda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d92:	88bb      	ldrh	r3, [r7, #4]
 8003d94:	3303      	adds	r3, #3
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e018      	b.n	8003dd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	031a      	lsls	r2, r3, #12
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dac:	461a      	mov	r2, r3
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3e2      	bcc.n	8003da0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3724      	adds	r7, #36	@ 0x24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b08b      	sub	sp, #44	@ 0x2c
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	e014      	b.n	8003e3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	3301      	adds	r3, #1
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	3301      	adds	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	3301      	adds	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	3301      	adds	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3e6      	bcc.n	8003e14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e46:	8bfb      	ldrh	r3, [r7, #30]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01e      	beq.n	8003e8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e56:	461a      	mov	r2, r3
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	701a      	strb	r2, [r3, #0]
      i++;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	3301      	adds	r3, #1
 8003e76:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003e7e:	8bfb      	ldrh	r3, [r7, #30]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e84:	8bfb      	ldrh	r3, [r7, #30]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ea      	bne.n	8003e60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	372c      	adds	r7, #44	@ 0x2c
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d12c      	bne.n	8003f0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db12      	blt.n	8003eec <USB_EPSetStall+0x54>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00f      	beq.n	8003eec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e02b      	b.n	8003f66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	db12      	blt.n	8003f46 <USB_EPSetStall+0xae>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00f      	beq.n	8003f46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d128      	bne.n	8003fe2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003faa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	791b      	ldrb	r3, [r3, #4]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <USB_EPClearStall+0x4c>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	791b      	ldrb	r3, [r3, #4]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d138      	bne.n	8004032 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	e027      	b.n	8004032 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ffc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	791b      	ldrb	r3, [r3, #4]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d003      	beq.n	8004012 <USB_EPClearStall+0x9e>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	791b      	ldrb	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d10f      	bne.n	8004032 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004030:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800405e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004062:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ba:	f023 0302 	bic.w	r3, r3, #2
 80040be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040e8:	f023 0303 	bic.w	r3, r3, #3
 80040ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004128:	68fb      	ldr	r3, [r7, #12]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0c1b      	lsrs	r3, r3, #16
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	4013      	ands	r3, r2
 800418c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	b29b      	uxth	r3, r3
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041cc:	68bb      	ldr	r3, [r7, #8]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	01db      	lsls	r3, r3, #7
 800420c:	b2db      	uxtb	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004228:	68bb      	ldr	r3, [r7, #8]
}
 800422a:	4618      	mov	r0, r3
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0301 	and.w	r3, r3, #1
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800426c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	460b      	mov	r3, r1
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	333c      	adds	r3, #60	@ 0x3c
 80042ae:	3304      	adds	r3, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <USB_EP0_OutStart+0xb8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d90a      	bls.n	80042d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042cc:	d101      	bne.n	80042d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e037      	b.n	8004342 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004300:	f043 0318 	orr.w	r3, r3, #24
 8004304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004314:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004318:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10f      	bne.n	8004340 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800433a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800433e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	4f54300a 	.word	0x4f54300a

08004354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800436c:	d901      	bls.n	8004372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e01b      	b.n	80043aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	daf2      	bge.n	8004360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004396:	d901      	bls.n	800439c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e006      	b.n	80043aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d0f0      	beq.n	800438a <USB_CoreReset+0x36>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80043c8:	f002 fcc2 	bl	8006d50 <USBD_static_malloc>
 80043cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	32b0      	adds	r2, #176	@ 0xb0
 80043de:	2100      	movs	r1, #0
 80043e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0d4      	b.n	8004592 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80043e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80043ec:	2100      	movs	r1, #0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f002 fcf2 	bl	8006dd8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	32b0      	adds	r2, #176	@ 0xb0
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	32b0      	adds	r2, #176	@ 0xb0
 800440e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7c1b      	ldrb	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d138      	bne.n	8004492 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004420:	4b5e      	ldr	r3, [pc, #376]	@ (800459c <USBD_CDC_Init+0x1e4>)
 8004422:	7819      	ldrb	r1, [r3, #0]
 8004424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004428:	2202      	movs	r2, #2
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f002 fb6d 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004430:	4b5a      	ldr	r3, [pc, #360]	@ (800459c <USBD_CDC_Init+0x1e4>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3324      	adds	r3, #36	@ 0x24
 8004446:	2201      	movs	r2, #1
 8004448:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800444a:	4b55      	ldr	r3, [pc, #340]	@ (80045a0 <USBD_CDC_Init+0x1e8>)
 800444c:	7819      	ldrb	r1, [r3, #0]
 800444e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004452:	2202      	movs	r2, #2
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f002 fb58 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800445a:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <USBD_CDC_Init+0x1e8>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004472:	2201      	movs	r2, #1
 8004474:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004476:	4b4b      	ldr	r3, [pc, #300]	@ (80045a4 <USBD_CDC_Init+0x1ec>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3326      	adds	r3, #38	@ 0x26
 800448c:	2210      	movs	r2, #16
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e035      	b.n	80044fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004492:	4b42      	ldr	r3, [pc, #264]	@ (800459c <USBD_CDC_Init+0x1e4>)
 8004494:	7819      	ldrb	r1, [r3, #0]
 8004496:	2340      	movs	r3, #64	@ 0x40
 8004498:	2202      	movs	r2, #2
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f002 fb35 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044a0:	4b3e      	ldr	r3, [pc, #248]	@ (800459c <USBD_CDC_Init+0x1e4>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	3324      	adds	r3, #36	@ 0x24
 80044b6:	2201      	movs	r2, #1
 80044b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80044ba:	4b39      	ldr	r3, [pc, #228]	@ (80045a0 <USBD_CDC_Init+0x1e8>)
 80044bc:	7819      	ldrb	r1, [r3, #0]
 80044be:	2340      	movs	r3, #64	@ 0x40
 80044c0:	2202      	movs	r2, #2
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f002 fb21 	bl	8006b0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044c8:	4b35      	ldr	r3, [pc, #212]	@ (80045a0 <USBD_CDC_Init+0x1e8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f003 020f 	and.w	r2, r3, #15
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80044e0:	2201      	movs	r2, #1
 80044e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044e4:	4b2f      	ldr	r3, [pc, #188]	@ (80045a4 <USBD_CDC_Init+0x1ec>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	f003 020f 	and.w	r2, r3, #15
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3326      	adds	r3, #38	@ 0x26
 80044fa:	2210      	movs	r2, #16
 80044fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044fe:	4b29      	ldr	r3, [pc, #164]	@ (80045a4 <USBD_CDC_Init+0x1ec>)
 8004500:	7819      	ldrb	r1, [r3, #0]
 8004502:	2308      	movs	r3, #8
 8004504:	2203      	movs	r2, #3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f002 faff 	bl	8006b0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <USBD_CDC_Init+0x1ec>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f003 020f 	and.w	r2, r3, #15
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3324      	adds	r3, #36	@ 0x24
 8004522:	2201      	movs	r2, #1
 8004524:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	33b0      	adds	r3, #176	@ 0xb0
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800455c:	2302      	movs	r3, #2
 800455e:	e018      	b.n	8004592 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7c1b      	ldrb	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004568:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <USBD_CDC_Init+0x1e8>)
 800456a:	7819      	ldrb	r1, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f002 fbb6 	bl	8006ce8 <USBD_LL_PrepareReceive>
 800457c:	e008      	b.n	8004590 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800457e:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <USBD_CDC_Init+0x1e8>)
 8004580:	7819      	ldrb	r1, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004588:	2340      	movs	r3, #64	@ 0x40
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f002 fbac 	bl	8006ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000093 	.word	0x20000093
 80045a0:	20000094 	.word	0x20000094
 80045a4:	20000095 	.word	0x20000095

080045a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80045b4:	4b3a      	ldr	r3, [pc, #232]	@ (80046a0 <USBD_CDC_DeInit+0xf8>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f002 facb 	bl	8006b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80045c0:	4b37      	ldr	r3, [pc, #220]	@ (80046a0 <USBD_CDC_DeInit+0xf8>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3324      	adds	r3, #36	@ 0x24
 80045d6:	2200      	movs	r2, #0
 80045d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80045da:	4b32      	ldr	r3, [pc, #200]	@ (80046a4 <USBD_CDC_DeInit+0xfc>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f002 fab8 	bl	8006b56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80045e6:	4b2f      	ldr	r3, [pc, #188]	@ (80046a4 <USBD_CDC_DeInit+0xfc>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80045fe:	2200      	movs	r2, #0
 8004600:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004602:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <USBD_CDC_DeInit+0x100>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f002 faa4 	bl	8006b56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800460e:	4b26      	ldr	r3, [pc, #152]	@ (80046a8 <USBD_CDC_DeInit+0x100>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3324      	adds	r3, #36	@ 0x24
 8004624:	2200      	movs	r2, #0
 8004626:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004628:	4b1f      	ldr	r3, [pc, #124]	@ (80046a8 <USBD_CDC_DeInit+0x100>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	3326      	adds	r3, #38	@ 0x26
 800463e:	2200      	movs	r2, #0
 8004640:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	32b0      	adds	r2, #176	@ 0xb0
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01f      	beq.n	8004694 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	33b0      	adds	r3, #176	@ 0xb0
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	32b0      	adds	r2, #176	@ 0xb0
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	4618      	mov	r0, r3
 8004678:	f002 fb78 	bl	8006d6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	32b0      	adds	r2, #176	@ 0xb0
 8004686:	2100      	movs	r1, #0
 8004688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000093 	.word	0x20000093
 80046a4:	20000094 	.word	0x20000094
 80046a8:	20000095 	.word	0x20000095

080046ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	32b0      	adds	r2, #176	@ 0xb0
 80046c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0bf      	b.n	800485c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d050      	beq.n	800478a <USBD_CDC_Setup+0xde>
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	f040 80af 	bne.w	800484c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	88db      	ldrh	r3, [r3, #6]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03a      	beq.n	800476c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b25b      	sxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da1b      	bge.n	8004738 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	33b0      	adds	r3, #176	@ 0xb0
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004716:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	88d2      	ldrh	r2, [r2, #6]
 800471c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	88db      	ldrh	r3, [r3, #6]
 8004722:	2b07      	cmp	r3, #7
 8004724:	bf28      	it	cs
 8004726:	2307      	movcs	r3, #7
 8004728:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	89fa      	ldrh	r2, [r7, #14]
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f001 fd93 	bl	800625c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004736:	e090      	b.n	800485a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785a      	ldrb	r2, [r3, #1]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	88db      	ldrh	r3, [r3, #6]
 8004746:	2b3f      	cmp	r3, #63	@ 0x3f
 8004748:	d803      	bhi.n	8004752 <USBD_CDC_Setup+0xa6>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	88db      	ldrh	r3, [r3, #6]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	e000      	b.n	8004754 <USBD_CDC_Setup+0xa8>
 8004752:	2240      	movs	r2, #64	@ 0x40
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004762:	461a      	mov	r2, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 fda5 	bl	80062b4 <USBD_CtlPrepareRx>
      break;
 800476a:	e076      	b.n	800485a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	33b0      	adds	r3, #176	@ 0xb0
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	7850      	ldrb	r0, [r2, #1]
 8004782:	2200      	movs	r2, #0
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4798      	blx	r3
      break;
 8004788:	e067      	b.n	800485a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b0b      	cmp	r3, #11
 8004790:	d851      	bhi.n	8004836 <USBD_CDC_Setup+0x18a>
 8004792:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <USBD_CDC_Setup+0xec>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047c9 	.word	0x080047c9
 800479c:	08004845 	.word	0x08004845
 80047a0:	08004837 	.word	0x08004837
 80047a4:	08004837 	.word	0x08004837
 80047a8:	08004837 	.word	0x08004837
 80047ac:	08004837 	.word	0x08004837
 80047b0:	08004837 	.word	0x08004837
 80047b4:	08004837 	.word	0x08004837
 80047b8:	08004837 	.word	0x08004837
 80047bc:	08004837 	.word	0x08004837
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	0800481d 	.word	0x0800481d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d107      	bne.n	80047e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80047d4:	f107 030a 	add.w	r3, r7, #10
 80047d8:	2202      	movs	r2, #2
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 fd3d 	bl	800625c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047e2:	e032      	b.n	800484a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fcbb 	bl	8006162 <USBD_CtlError>
            ret = USBD_FAIL;
 80047ec:	2303      	movs	r3, #3
 80047ee:	75fb      	strb	r3, [r7, #23]
          break;
 80047f0:	e02b      	b.n	800484a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047fe:	f107 030d 	add.w	r3, r7, #13
 8004802:	2201      	movs	r2, #1
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 fd28 	bl	800625c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800480c:	e01d      	b.n	800484a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800480e:	6839      	ldr	r1, [r7, #0]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 fca6 	bl	8006162 <USBD_CtlError>
            ret = USBD_FAIL;
 8004816:	2303      	movs	r3, #3
 8004818:	75fb      	strb	r3, [r7, #23]
          break;
 800481a:	e016      	b.n	800484a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d00f      	beq.n	8004848 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 fc99 	bl	8006162 <USBD_CtlError>
            ret = USBD_FAIL;
 8004830:	2303      	movs	r3, #3
 8004832:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004834:	e008      	b.n	8004848 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fc92 	bl	8006162 <USBD_CtlError>
          ret = USBD_FAIL;
 800483e:	2303      	movs	r3, #3
 8004840:	75fb      	strb	r3, [r7, #23]
          break;
 8004842:	e002      	b.n	800484a <USBD_CDC_Setup+0x19e>
          break;
 8004844:	bf00      	nop
 8004846:	e008      	b.n	800485a <USBD_CDC_Setup+0x1ae>
          break;
 8004848:	bf00      	nop
      }
      break;
 800484a:	e006      	b.n	800485a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fc87 	bl	8006162 <USBD_CtlError>
      ret = USBD_FAIL;
 8004854:	2303      	movs	r3, #3
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	bf00      	nop
  }

  return (uint8_t)ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004876:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	32b0      	adds	r2, #176	@ 0xb0
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800488a:	2303      	movs	r3, #3
 800488c:	e065      	b.n	800495a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	32b0      	adds	r2, #176	@ 0xb0
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	3318      	adds	r3, #24
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02f      	beq.n	8004918 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3318      	adds	r3, #24
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 010f 	and.w	r1, r3, #15
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	460b      	mov	r3, r1
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4403      	add	r3, r0
 80048e0:	331c      	adds	r3, #28
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d112      	bne.n	8004918 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 020f 	and.w	r2, r3, #15
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	3318      	adds	r3, #24
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800490a:	78f9      	ldrb	r1, [r7, #3]
 800490c:	2300      	movs	r3, #0
 800490e:	2200      	movs	r2, #0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f002 f9c8 	bl	8006ca6 <USBD_LL_Transmit>
 8004916:	e01f      	b.n	8004958 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	33b0      	adds	r3, #176	@ 0xb0
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	33b0      	adds	r3, #176	@ 0xb0
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	32b0      	adds	r2, #176	@ 0xb0
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	32b0      	adds	r2, #176	@ 0xb0
 8004988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004990:	2303      	movs	r3, #3
 8004992:	e01a      	b.n	80049ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f002 f9c6 	bl	8006d2a <USBD_LL_GetRxDataSize>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	33b0      	adds	r3, #176	@ 0xb0
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80049c4:	4611      	mov	r1, r2
 80049c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	32b0      	adds	r2, #176	@ 0xb0
 80049e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e024      	b.n	8004a3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	33b0      	adds	r3, #176	@ 0xb0
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d019      	beq.n	8004a3c <USBD_CDC_EP0_RxReady+0x6a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a0e:	2bff      	cmp	r3, #255	@ 0xff
 8004a10:	d014      	beq.n	8004a3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	33b0      	adds	r3, #176	@ 0xb0
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004a2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	22ff      	movs	r2, #255	@ 0xff
 8004a38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a50:	2182      	movs	r1, #130	@ 0x82
 8004a52:	4818      	ldr	r0, [pc, #96]	@ (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a54:	f000 fd4f 	bl	80054f6 <USBD_GetEpDesc>
 8004a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4815      	ldr	r0, [pc, #84]	@ (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a5e:	f000 fd4a 	bl	80054f6 <USBD_GetEpDesc>
 8004a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a64:	2181      	movs	r1, #129	@ 0x81
 8004a66:	4813      	ldr	r0, [pc, #76]	@ (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a68:	f000 fd45 	bl	80054f6 <USBD_GetEpDesc>
 8004a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2210      	movs	r2, #16
 8004a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d006      	beq.n	8004a8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a88:	711a      	strb	r2, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a9c:	711a      	strb	r2, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2243      	movs	r2, #67	@ 0x43
 8004aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004aa8:	4b02      	ldr	r3, [pc, #8]	@ (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000050 	.word	0x20000050

08004ab8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ac0:	2182      	movs	r1, #130	@ 0x82
 8004ac2:	4818      	ldr	r0, [pc, #96]	@ (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ac4:	f000 fd17 	bl	80054f6 <USBD_GetEpDesc>
 8004ac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004aca:	2101      	movs	r1, #1
 8004acc:	4815      	ldr	r0, [pc, #84]	@ (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ace:	f000 fd12 	bl	80054f6 <USBD_GetEpDesc>
 8004ad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ad4:	2181      	movs	r1, #129	@ 0x81
 8004ad6:	4813      	ldr	r0, [pc, #76]	@ (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ad8:	f000 fd0d 	bl	80054f6 <USBD_GetEpDesc>
 8004adc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2200      	movs	r2, #0
 8004af4:	711a      	strb	r2, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f042 0202 	orr.w	r2, r2, #2
 8004afc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d006      	beq.n	8004b12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	711a      	strb	r2, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f042 0202 	orr.w	r2, r2, #2
 8004b10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2243      	movs	r2, #67	@ 0x43
 8004b16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b18:	4b02      	ldr	r3, [pc, #8]	@ (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000050 	.word	0x20000050

08004b28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b30:	2182      	movs	r1, #130	@ 0x82
 8004b32:	4818      	ldr	r0, [pc, #96]	@ (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b34:	f000 fcdf 	bl	80054f6 <USBD_GetEpDesc>
 8004b38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4815      	ldr	r0, [pc, #84]	@ (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b3e:	f000 fcda 	bl	80054f6 <USBD_GetEpDesc>
 8004b42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b44:	2181      	movs	r1, #129	@ 0x81
 8004b46:	4813      	ldr	r0, [pc, #76]	@ (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b48:	f000 fcd5 	bl	80054f6 <USBD_GetEpDesc>
 8004b4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2210      	movs	r2, #16
 8004b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b68:	711a      	strb	r2, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b7c:	711a      	strb	r2, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2243      	movs	r2, #67	@ 0x43
 8004b86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b88:	4b02      	ldr	r3, [pc, #8]	@ (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000050 	.word	0x20000050

08004b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ba6:	4b03      	ldr	r3, [pc, #12]	@ (8004bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e009      	b.n	8004be0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	33b0      	adds	r3, #176	@ 0xb0
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	32b0      	adds	r2, #176	@ 0xb0
 8004c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c06:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e008      	b.n	8004c24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	32b0      	adds	r2, #176	@ 0xb0
 8004c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e004      	b.n	8004c5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	32b0      	adds	r2, #176	@ 0xb0
 8004c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c82:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e025      	b.n	8004cde <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d11f      	bne.n	8004cdc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004ca4:	4b10      	ldr	r3, [pc, #64]	@ (8004ce8 <USBD_CDC_TransmitPacket+0x7c>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4403      	add	r3, r0
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <USBD_CDC_TransmitPacket+0x7c>)
 8004cc4:	7819      	ldrb	r1, [r3, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 ffe7 	bl	8006ca6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000093 	.word	0x20000093

08004cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	32b0      	adds	r2, #176	@ 0xb0
 8004cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	32b0      	adds	r2, #176	@ 0xb0
 8004d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e018      	b.n	8004d4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7c1b      	ldrb	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d22:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <USBD_CDC_ReceivePacket+0x68>)
 8004d24:	7819      	ldrb	r1, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 ffd9 	bl	8006ce8 <USBD_LL_PrepareReceive>
 8004d36:	e008      	b.n	8004d4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <USBD_CDC_ReceivePacket+0x68>)
 8004d3a:	7819      	ldrb	r1, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d42:	2340      	movs	r3, #64	@ 0x40
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f001 ffcf 	bl	8006ce8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000094 	.word	0x20000094

08004d58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e01f      	b.n	8004db0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	79fa      	ldrb	r2, [r7, #7]
 8004da2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f001 fe49 	bl	8006a3c <USBD_LL_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e025      	b.n	8004e1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	32ae      	adds	r2, #174	@ 0xae
 8004de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	32ae      	adds	r2, #174	@ 0xae
 8004df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfc:	f107 020e 	add.w	r2, r7, #14
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 fe51 	bl	8006ad4 <USBD_LL_Start>
 8004e32:	4603      	mov	r3, r0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	4611      	mov	r1, r2
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 f90c 	bl	80060ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d01a      	beq.n	8004f30 <USBD_LL_SetupStage+0x72>
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d822      	bhi.n	8004f44 <USBD_LL_SetupStage+0x86>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <USBD_LL_SetupStage+0x4a>
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d00a      	beq.n	8004f1c <USBD_LL_SetupStage+0x5e>
 8004f06:	e01d      	b.n	8004f44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb63 	bl	80055dc <USBD_StdDevReq>
 8004f16:	4603      	mov	r3, r0
 8004f18:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1a:	e020      	b.n	8004f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fbcb 	bl	80056c0 <USBD_StdItfReq>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2e:	e016      	b.n	8004f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fc2d 	bl	8005798 <USBD_StdEPReq>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
      break;
 8004f42:	e00c      	b.n	8004f5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004f4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fe1e 	bl	8006b94 <USBD_LL_StallEP>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	bf00      	nop
  }

  return ret;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	460b      	mov	r3, r1
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d16e      	bne.n	800505e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	f040 8098 	bne.w	80050c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d913      	bls.n	8004fc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	1ad2      	subs	r2, r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	bf28      	it	cs
 8004fba:	4613      	movcs	r3, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f001 f994 	bl	80062ee <USBD_CtlContinueRx>
 8004fc6:	e07d      	b.n	80050c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d014      	beq.n	8005000 <USBD_LL_DataOutStage+0x98>
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d81d      	bhi.n	8005016 <USBD_LL_DataOutStage+0xae>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <USBD_LL_DataOutStage+0x7c>
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d003      	beq.n	8004fea <USBD_LL_DataOutStage+0x82>
 8004fe2:	e018      	b.n	8005016 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8004fe8:	e018      	b.n	800501c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fa64 	bl	80054c2 <USBD_CoreFindIF>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8004ffe:	e00d      	b.n	800501c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fa66 	bl	80054dc <USBD_CoreFindEP>
 8005010:	4603      	mov	r3, r0
 8005012:	75bb      	strb	r3, [r7, #22]
            break;
 8005014:	e002      	b.n	800501c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	75bb      	strb	r3, [r7, #22]
            break;
 800501a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800501c:	7dbb      	ldrb	r3, [r7, #22]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d119      	bne.n	8005056 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d113      	bne.n	8005056 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800502e:	7dba      	ldrb	r2, [r7, #22]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	32ae      	adds	r2, #174	@ 0xae
 8005034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800503e:	7dba      	ldrb	r2, [r7, #22]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005046:	7dba      	ldrb	r2, [r7, #22]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	32ae      	adds	r2, #174	@ 0xae
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f001 f95a 	bl	8006310 <USBD_CtlSendStatus>
 800505c:	e032      	b.n	80050c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4619      	mov	r1, r3
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fa37 	bl	80054dc <USBD_CoreFindEP>
 800506e:	4603      	mov	r3, r0
 8005070:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005072:	7dbb      	ldrb	r3, [r7, #22]
 8005074:	2bff      	cmp	r3, #255	@ 0xff
 8005076:	d025      	beq.n	80050c4 <USBD_LL_DataOutStage+0x15c>
 8005078:	7dbb      	ldrb	r3, [r7, #22]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d122      	bne.n	80050c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b03      	cmp	r3, #3
 8005088:	d117      	bne.n	80050ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800508a:	7dba      	ldrb	r2, [r7, #22]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	32ae      	adds	r2, #174	@ 0xae
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00f      	beq.n	80050ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800509a:	7dba      	ldrb	r2, [r7, #22]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050a2:	7dba      	ldrb	r2, [r7, #22]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	32ae      	adds	r2, #174	@ 0xae
 80050a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	7afa      	ldrb	r2, [r7, #11]
 80050b0:	4611      	mov	r1, r2
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	4798      	blx	r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	e000      	b.n	80050c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	460b      	mov	r3, r1
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80050dc:	7afb      	ldrb	r3, [r7, #11]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d16f      	bne.n	80051c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3314      	adds	r3, #20
 80050e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d15a      	bne.n	80051a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d914      	bls.n	8005128 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	461a      	mov	r2, r3
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f001 f8bc 	bl	8006292 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800511a:	2300      	movs	r3, #0
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f001 fde1 	bl	8006ce8 <USBD_LL_PrepareReceive>
 8005126:	e03f      	b.n	80051a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	d11c      	bne.n	800516e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800513c:	429a      	cmp	r2, r3
 800513e:	d316      	bcc.n	800516e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800514a:	429a      	cmp	r2, r3
 800514c:	d20f      	bcs.n	800516e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800514e:	2200      	movs	r2, #0
 8005150:	2100      	movs	r1, #0
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f001 f89d 	bl	8006292 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005160:	2300      	movs	r3, #0
 8005162:	2200      	movs	r2, #0
 8005164:	2100      	movs	r1, #0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f001 fdbe 	bl	8006ce8 <USBD_LL_PrepareReceive>
 800516c:	e01c      	b.n	80051a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d10f      	bne.n	800519a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800519a:	2180      	movs	r1, #128	@ 0x80
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f001 fcf9 	bl	8006b94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f001 f8c7 	bl	8006336 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03a      	beq.n	8005228 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fe42 	bl	8004e3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80051c0:	e032      	b.n	8005228 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051c2:	7afb      	ldrb	r3, [r7, #11]
 80051c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f985 	bl	80054dc <USBD_CoreFindEP>
 80051d2:	4603      	mov	r3, r0
 80051d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	2bff      	cmp	r3, #255	@ 0xff
 80051da:	d025      	beq.n	8005228 <USBD_LL_DataInStage+0x15a>
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d122      	bne.n	8005228 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d11c      	bne.n	8005228 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80051ee:	7dfa      	ldrb	r2, [r7, #23]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	32ae      	adds	r2, #174	@ 0xae
 80051f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80051fe:	7dfa      	ldrb	r2, [r7, #23]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005206:	7dfa      	ldrb	r2, [r7, #23]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	32ae      	adds	r2, #174	@ 0xae
 800520c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	7afa      	ldrb	r2, [r7, #11]
 8005214:	4611      	mov	r1, r2
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	4798      	blx	r3
 800521a:	4603      	mov	r3, r0
 800521c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800521e:	7dbb      	ldrb	r3, [r7, #22]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005224:	7dbb      	ldrb	r3, [r7, #22]
 8005226:	e000      	b.n	800522a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d014      	beq.n	8005298 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00e      	beq.n	8005298 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6852      	ldr	r2, [r2, #4]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	4611      	mov	r1, r2
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005294:	2303      	movs	r3, #3
 8005296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005298:	2340      	movs	r3, #64	@ 0x40
 800529a:	2200      	movs	r2, #0
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f001 fc33 	bl	8006b0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2240      	movs	r2, #64	@ 0x40
 80052b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052b4:	2340      	movs	r3, #64	@ 0x40
 80052b6:	2200      	movs	r2, #0
 80052b8:	2180      	movs	r1, #128	@ 0x80
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fc25 	bl	8006b0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2240      	movs	r2, #64	@ 0x40
 80052ca:	621a      	str	r2, [r3, #32]

  return ret;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b04      	cmp	r3, #4
 8005308:	d006      	beq.n	8005318 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2204      	movs	r2, #4
 800531c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b04      	cmp	r3, #4
 8005340:	d106      	bne.n	8005350 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b03      	cmp	r3, #3
 8005370:	d110      	bne.n	8005394 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	32ae      	adds	r2, #174	@ 0xae
 80053b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	e01c      	b.n	80053fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d115      	bne.n	80053f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32ae      	adds	r2, #174	@ 0xae
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	32ae      	adds	r2, #174	@ 0xae
 80053ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	4611      	mov	r1, r2
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	32ae      	adds	r2, #174	@ 0xae
 8005418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	e01c      	b.n	800545e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d115      	bne.n	800545c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	32ae      	adds	r2, #174	@ 0xae
 800543a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	32ae      	adds	r2, #174	@ 0xae
 800544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	4611      	mov	r1, r2
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6852      	ldr	r2, [r2, #4]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	4611      	mov	r1, r2
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054b4:	2303      	movs	r3, #3
 80054b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	885b      	ldrh	r3, [r3, #2]
 8005512:	b29b      	uxth	r3, r3
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	4293      	cmp	r3, r2
 800551a:	d91f      	bls.n	800555c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005522:	e013      	b.n	800554c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005524:	f107 030a 	add.w	r3, r7, #10
 8005528:	4619      	mov	r1, r3
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f000 f81b 	bl	8005566 <USBD_GetNextDesc>
 8005530:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d108      	bne.n	800554c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	789b      	ldrb	r3, [r3, #2]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	429a      	cmp	r2, r3
 8005546:	d008      	beq.n	800555a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	885b      	ldrh	r3, [r3, #2]
 8005550:	b29a      	uxth	r2, r3
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	429a      	cmp	r2, r3
 8005556:	d8e5      	bhi.n	8005524 <USBD_GetEpDesc+0x2e>
 8005558:	e000      	b.n	800555c <USBD_GetEpDesc+0x66>
          break;
 800555a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800555c:	693b      	ldr	r3, [r7, #16]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	4413      	add	r3, r2
 800557e:	b29a      	uxth	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4413      	add	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800559e:	b480      	push	{r7}
 80055a0:	b087      	sub	sp, #28
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3301      	adds	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055bc:	8a3b      	ldrh	r3, [r7, #16]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b21a      	sxth	r2, r3
 80055c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055cc:	89fb      	ldrh	r3, [r7, #14]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055f2:	2b40      	cmp	r3, #64	@ 0x40
 80055f4:	d005      	beq.n	8005602 <USBD_StdDevReq+0x26>
 80055f6:	2b40      	cmp	r3, #64	@ 0x40
 80055f8:	d857      	bhi.n	80056aa <USBD_StdDevReq+0xce>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00f      	beq.n	800561e <USBD_StdDevReq+0x42>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d153      	bne.n	80056aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	32ae      	adds	r2, #174	@ 0xae
 800560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
      break;
 800561c:	e04a      	b.n	80056b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b09      	cmp	r3, #9
 8005624:	d83b      	bhi.n	800569e <USBD_StdDevReq+0xc2>
 8005626:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <USBD_StdDevReq+0x50>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005681 	.word	0x08005681
 8005630:	08005695 	.word	0x08005695
 8005634:	0800569f 	.word	0x0800569f
 8005638:	0800568b 	.word	0x0800568b
 800563c:	0800569f 	.word	0x0800569f
 8005640:	0800565f 	.word	0x0800565f
 8005644:	08005655 	.word	0x08005655
 8005648:	0800569f 	.word	0x0800569f
 800564c:	08005677 	.word	0x08005677
 8005650:	08005669 	.word	0x08005669
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa3c 	bl	8005ad4 <USBD_GetDescriptor>
          break;
 800565c:	e024      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fba1 	bl	8005da8 <USBD_SetAddress>
          break;
 8005666:	e01f      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fbe0 	bl	8005e30 <USBD_SetConfig>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
          break;
 8005674:	e018      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc83 	bl	8005f84 <USBD_GetConfig>
          break;
 800567e:	e013      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fcb4 	bl	8005ff0 <USBD_GetStatus>
          break;
 8005688:	e00e      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fce3 	bl	8006058 <USBD_SetFeature>
          break;
 8005692:	e009      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fd07 	bl	80060aa <USBD_ClrFeature>
          break;
 800569c:	e004      	b.n	80056a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fd5e 	bl	8006162 <USBD_CtlError>
          break;
 80056a6:	bf00      	nop
      }
      break;
 80056a8:	e004      	b.n	80056b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fd58 	bl	8006162 <USBD_CtlError>
      break;
 80056b2:	bf00      	nop
  }

  return ret;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop

080056c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056d6:	2b40      	cmp	r3, #64	@ 0x40
 80056d8:	d005      	beq.n	80056e6 <USBD_StdItfReq+0x26>
 80056da:	2b40      	cmp	r3, #64	@ 0x40
 80056dc:	d852      	bhi.n	8005784 <USBD_StdItfReq+0xc4>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <USBD_StdItfReq+0x26>
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d14e      	bne.n	8005784 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d840      	bhi.n	8005776 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	889b      	ldrh	r3, [r3, #4]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d836      	bhi.n	800576c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	889b      	ldrh	r3, [r3, #4]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fedb 	bl	80054c2 <USBD_CoreFindIF>
 800570c:	4603      	mov	r3, r0
 800570e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	2bff      	cmp	r3, #255	@ 0xff
 8005714:	d01d      	beq.n	8005752 <USBD_StdItfReq+0x92>
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d11a      	bne.n	8005752 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800571c:	7bba      	ldrb	r2, [r7, #14]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	32ae      	adds	r2, #174	@ 0xae
 8005722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00f      	beq.n	800574c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800572c:	7bba      	ldrb	r2, [r7, #14]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005734:	7bba      	ldrb	r2, [r7, #14]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32ae      	adds	r2, #174	@ 0xae
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800574a:	e004      	b.n	8005756 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005750:	e001      	b.n	8005756 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005752:	2303      	movs	r3, #3
 8005754:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	88db      	ldrh	r3, [r3, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d110      	bne.n	8005780 <USBD_StdItfReq+0xc0>
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10d      	bne.n	8005780 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fdd3 	bl	8006310 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800576a:	e009      	b.n	8005780 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fcf7 	bl	8006162 <USBD_CtlError>
          break;
 8005774:	e004      	b.n	8005780 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fcf2 	bl	8006162 <USBD_CtlError>
          break;
 800577e:	e000      	b.n	8005782 <USBD_StdItfReq+0xc2>
          break;
 8005780:	bf00      	nop
      }
      break;
 8005782:	e004      	b.n	800578e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fceb 	bl	8006162 <USBD_CtlError>
      break;
 800578c:	bf00      	nop
  }

  return ret;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	889b      	ldrh	r3, [r3, #4]
 80057aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057b4:	2b40      	cmp	r3, #64	@ 0x40
 80057b6:	d007      	beq.n	80057c8 <USBD_StdEPReq+0x30>
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	f200 817f 	bhi.w	8005abc <USBD_StdEPReq+0x324>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d02a      	beq.n	8005818 <USBD_StdEPReq+0x80>
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	f040 817a 	bne.w	8005abc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe85 	bl	80054dc <USBD_CoreFindEP>
 80057d2:	4603      	mov	r3, r0
 80057d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057d6:	7b7b      	ldrb	r3, [r7, #13]
 80057d8:	2bff      	cmp	r3, #255	@ 0xff
 80057da:	f000 8174 	beq.w	8005ac6 <USBD_StdEPReq+0x32e>
 80057de:	7b7b      	ldrb	r3, [r7, #13]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f040 8170 	bne.w	8005ac6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80057e6:	7b7a      	ldrb	r2, [r7, #13]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80057ee:	7b7a      	ldrb	r2, [r7, #13]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	32ae      	adds	r2, #174	@ 0xae
 80057f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8163 	beq.w	8005ac6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005800:	7b7a      	ldrb	r2, [r7, #13]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	32ae      	adds	r2, #174	@ 0xae
 8005806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005816:	e156      	b.n	8005ac6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d008      	beq.n	8005832 <USBD_StdEPReq+0x9a>
 8005820:	2b03      	cmp	r3, #3
 8005822:	f300 8145 	bgt.w	8005ab0 <USBD_StdEPReq+0x318>
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 809b 	beq.w	8005962 <USBD_StdEPReq+0x1ca>
 800582c:	2b01      	cmp	r3, #1
 800582e:	d03c      	beq.n	80058aa <USBD_StdEPReq+0x112>
 8005830:	e13e      	b.n	8005ab0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d002      	beq.n	8005844 <USBD_StdEPReq+0xac>
 800583e:	2b03      	cmp	r3, #3
 8005840:	d016      	beq.n	8005870 <USBD_StdEPReq+0xd8>
 8005842:	e02c      	b.n	800589e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <USBD_StdEPReq+0xce>
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	2b80      	cmp	r3, #128	@ 0x80
 800584e:	d00a      	beq.n	8005866 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 f99d 	bl	8006b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800585a:	2180      	movs	r1, #128	@ 0x80
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 f999 	bl	8006b94 <USBD_LL_StallEP>
 8005862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005864:	e020      	b.n	80058a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fc7a 	bl	8006162 <USBD_CtlError>
              break;
 800586e:	e01b      	b.n	80058a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	885b      	ldrh	r3, [r3, #2]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10e      	bne.n	8005896 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005878:	7bbb      	ldrb	r3, [r7, #14]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <USBD_StdEPReq+0xfe>
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b80      	cmp	r3, #128	@ 0x80
 8005882:	d008      	beq.n	8005896 <USBD_StdEPReq+0xfe>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88db      	ldrh	r3, [r3, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 f97f 	bl	8006b94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fd3a 	bl	8006310 <USBD_CtlSendStatus>

              break;
 800589c:	e004      	b.n	80058a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fc5e 	bl	8006162 <USBD_CtlError>
              break;
 80058a6:	bf00      	nop
          }
          break;
 80058a8:	e107      	b.n	8005aba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d002      	beq.n	80058bc <USBD_StdEPReq+0x124>
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d016      	beq.n	80058e8 <USBD_StdEPReq+0x150>
 80058ba:	e04b      	b.n	8005954 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00d      	beq.n	80058de <USBD_StdEPReq+0x146>
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	2b80      	cmp	r3, #128	@ 0x80
 80058c6:	d00a      	beq.n	80058de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f961 	bl	8006b94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058d2:	2180      	movs	r1, #128	@ 0x80
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 f95d 	bl	8006b94 <USBD_LL_StallEP>
 80058da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058dc:	e040      	b.n	8005960 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fc3e 	bl	8006162 <USBD_CtlError>
              break;
 80058e6:	e03b      	b.n	8005960 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	885b      	ldrh	r3, [r3, #2]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d136      	bne.n	800595e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 f967 	bl	8006bd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fd03 	bl	8006310 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800590a:	7bbb      	ldrb	r3, [r7, #14]
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fde4 	bl	80054dc <USBD_CoreFindEP>
 8005914:	4603      	mov	r3, r0
 8005916:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005918:	7b7b      	ldrb	r3, [r7, #13]
 800591a:	2bff      	cmp	r3, #255	@ 0xff
 800591c:	d01f      	beq.n	800595e <USBD_StdEPReq+0x1c6>
 800591e:	7b7b      	ldrb	r3, [r7, #13]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d11c      	bne.n	800595e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005924:	7b7a      	ldrb	r2, [r7, #13]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800592c:	7b7a      	ldrb	r2, [r7, #13]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	32ae      	adds	r2, #174	@ 0xae
 8005932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800593c:	7b7a      	ldrb	r2, [r7, #13]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32ae      	adds	r2, #174	@ 0xae
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005952:	e004      	b.n	800595e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fc03 	bl	8006162 <USBD_CtlError>
              break;
 800595c:	e000      	b.n	8005960 <USBD_StdEPReq+0x1c8>
              break;
 800595e:	bf00      	nop
          }
          break;
 8005960:	e0ab      	b.n	8005aba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d002      	beq.n	8005974 <USBD_StdEPReq+0x1dc>
 800596e:	2b03      	cmp	r3, #3
 8005970:	d032      	beq.n	80059d8 <USBD_StdEPReq+0x240>
 8005972:	e097      	b.n	8005aa4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <USBD_StdEPReq+0x1f2>
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b80      	cmp	r3, #128	@ 0x80
 800597e:	d004      	beq.n	800598a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fbed 	bl	8006162 <USBD_CtlError>
                break;
 8005988:	e091      	b.n	8005aae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800598a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598e:	2b00      	cmp	r3, #0
 8005990:	da0b      	bge.n	80059aa <USBD_StdEPReq+0x212>
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	3310      	adds	r3, #16
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	3304      	adds	r3, #4
 80059a8:	e00b      	b.n	80059c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2202      	movs	r2, #2
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fc43 	bl	800625c <USBD_CtlSendData>
              break;
 80059d6:	e06a      	b.n	8005aae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da11      	bge.n	8005a04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	f003 020f 	and.w	r2, r3, #15
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	3324      	adds	r3, #36	@ 0x24
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d117      	bne.n	8005a2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fbb0 	bl	8006162 <USBD_CtlError>
                  break;
 8005a02:	e054      	b.n	8005aae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	f003 020f 	and.w	r2, r3, #15
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb9d 	bl	8006162 <USBD_CtlError>
                  break;
 8005a28:	e041      	b.n	8005aae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da0b      	bge.n	8005a4a <USBD_StdEPReq+0x2b2>
 8005a32:	7bbb      	ldrb	r3, [r7, #14]
 8005a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	3310      	adds	r3, #16
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	e00b      	b.n	8005a62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <USBD_StdEPReq+0x2d8>
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b80      	cmp	r3, #128	@ 0x80
 8005a6e:	d103      	bne.n	8005a78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e00e      	b.n	8005a96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f8c7 	bl	8006c10 <USBD_LL_IsStallEP>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fbdd 	bl	800625c <USBD_CtlSendData>
              break;
 8005aa2:	e004      	b.n	8005aae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb5b 	bl	8006162 <USBD_CtlError>
              break;
 8005aac:	bf00      	nop
          }
          break;
 8005aae:	e004      	b.n	8005aba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fb55 	bl	8006162 <USBD_CtlError>
          break;
 8005ab8:	bf00      	nop
      }
      break;
 8005aba:	e005      	b.n	8005ac8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb4f 	bl	8006162 <USBD_CtlError>
      break;
 8005ac4:	e000      	b.n	8005ac8 <USBD_StdEPReq+0x330>
      break;
 8005ac6:	bf00      	nop
  }

  return ret;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	885b      	ldrh	r3, [r3, #2]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	f200 8128 	bhi.w	8005d4a <USBD_GetDescriptor+0x276>
 8005afa:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <USBD_GetDescriptor+0x2c>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b1d 	.word	0x08005b1d
 8005b04:	08005b35 	.word	0x08005b35
 8005b08:	08005b75 	.word	0x08005b75
 8005b0c:	08005d4b 	.word	0x08005d4b
 8005b10:	08005d4b 	.word	0x08005d4b
 8005b14:	08005ceb 	.word	0x08005ceb
 8005b18:	08005d17 	.word	0x08005d17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	7c12      	ldrb	r2, [r2, #16]
 8005b28:	f107 0108 	add.w	r1, r7, #8
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
 8005b30:	60f8      	str	r0, [r7, #12]
      break;
 8005b32:	e112      	b.n	8005d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	7c1b      	ldrb	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10d      	bne.n	8005b58 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f107 0208 	add.w	r2, r7, #8
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	2202      	movs	r2, #2
 8005b54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b56:	e100      	b.n	8005d5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	f107 0208 	add.w	r2, r7, #8
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	2202      	movs	r2, #2
 8005b70:	701a      	strb	r2, [r3, #0]
      break;
 8005b72:	e0f2      	b.n	8005d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	885b      	ldrh	r3, [r3, #2]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	f200 80ac 	bhi.w	8005cd8 <USBD_GetDescriptor+0x204>
 8005b80:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <USBD_GetDescriptor+0xb4>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005ba1 	.word	0x08005ba1
 8005b8c:	08005bd5 	.word	0x08005bd5
 8005b90:	08005c09 	.word	0x08005c09
 8005b94:	08005c3d 	.word	0x08005c3d
 8005b98:	08005c71 	.word	0x08005c71
 8005b9c:	08005ca5 	.word	0x08005ca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	7c12      	ldrb	r2, [r2, #16]
 8005bb8:	f107 0108 	add.w	r1, r7, #8
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4798      	blx	r3
 8005bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bc2:	e091      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 facb 	bl	8006162 <USBD_CtlError>
            err++;
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005bd2:	e089      	b.n	8005ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	7c12      	ldrb	r2, [r2, #16]
 8005bec:	f107 0108 	add.w	r1, r7, #8
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bf6:	e077      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fab1 	bl	8006162 <USBD_CtlError>
            err++;
 8005c00:	7afb      	ldrb	r3, [r7, #11]
 8005c02:	3301      	adds	r3, #1
 8005c04:	72fb      	strb	r3, [r7, #11]
          break;
 8005c06:	e06f      	b.n	8005ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	7c12      	ldrb	r2, [r2, #16]
 8005c20:	f107 0108 	add.w	r1, r7, #8
 8005c24:	4610      	mov	r0, r2
 8005c26:	4798      	blx	r3
 8005c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c2a:	e05d      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa97 	bl	8006162 <USBD_CtlError>
            err++;
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	3301      	adds	r3, #1
 8005c38:	72fb      	strb	r3, [r7, #11]
          break;
 8005c3a:	e055      	b.n	8005ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	7c12      	ldrb	r2, [r2, #16]
 8005c54:	f107 0108 	add.w	r1, r7, #8
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
 8005c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c5e:	e043      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa7d 	bl	8006162 <USBD_CtlError>
            err++;
 8005c68:	7afb      	ldrb	r3, [r7, #11]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c6e:	e03b      	b.n	8005ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c92:	e029      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa63 	bl	8006162 <USBD_CtlError>
            err++;
 8005c9c:	7afb      	ldrb	r3, [r7, #11]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ca2:	e021      	b.n	8005ce8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7c12      	ldrb	r2, [r2, #16]
 8005cbc:	f107 0108 	add.w	r1, r7, #8
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cc6:	e00f      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa49 	bl	8006162 <USBD_CtlError>
            err++;
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8005cd6:	e007      	b.n	8005ce8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa41 	bl	8006162 <USBD_CtlError>
          err++;
 8005ce0:	7afb      	ldrb	r3, [r7, #11]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005ce6:	bf00      	nop
      }
      break;
 8005ce8:	e037      	b.n	8005d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7c1b      	ldrb	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	f107 0208 	add.w	r2, r7, #8
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4798      	blx	r3
 8005d02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d04:	e029      	b.n	8005d5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa2a 	bl	8006162 <USBD_CtlError>
        err++;
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	3301      	adds	r3, #1
 8005d12:	72fb      	strb	r3, [r7, #11]
      break;
 8005d14:	e021      	b.n	8005d5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7c1b      	ldrb	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d26:	f107 0208 	add.w	r2, r7, #8
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4798      	blx	r3
 8005d2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	2207      	movs	r2, #7
 8005d36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d38:	e00f      	b.n	8005d5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fa10 	bl	8006162 <USBD_CtlError>
        err++;
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	3301      	adds	r3, #1
 8005d46:	72fb      	strb	r3, [r7, #11]
      break;
 8005d48:	e007      	b.n	8005d5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fa08 	bl	8006162 <USBD_CtlError>
      err++;
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	3301      	adds	r3, #1
 8005d56:	72fb      	strb	r3, [r7, #11]
      break;
 8005d58:	bf00      	nop
  }

  if (err != 0U)
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d11e      	bne.n	8005d9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	88db      	ldrh	r3, [r3, #6]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d016      	beq.n	8005d96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d68:	893b      	ldrh	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	88da      	ldrh	r2, [r3, #6]
 8005d72:	893b      	ldrh	r3, [r7, #8]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	bf28      	it	cs
 8005d78:	4613      	movcs	r3, r2
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d7e:	893b      	ldrh	r3, [r7, #8]
 8005d80:	461a      	mov	r2, r3
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa69 	bl	800625c <USBD_CtlSendData>
 8005d8a:	e009      	b.n	8005da0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9e7 	bl	8006162 <USBD_CtlError>
 8005d94:	e004      	b.n	8005da0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 faba 	bl	8006310 <USBD_CtlSendStatus>
 8005d9c:	e000      	b.n	8005da0 <USBD_GetDescriptor+0x2cc>
    return;
 8005d9e:	bf00      	nop
  }
}
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	889b      	ldrh	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d131      	bne.n	8005e1e <USBD_SetAddress+0x76>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	88db      	ldrh	r3, [r3, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d12d      	bne.n	8005e1e <USBD_SetAddress+0x76>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	885b      	ldrh	r3, [r3, #2]
 8005dc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dc8:	d829      	bhi.n	8005e1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	885b      	ldrh	r3, [r3, #2]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d104      	bne.n	8005dec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9bc 	bl	8006162 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dea:	e01d      	b.n	8005e28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7bfa      	ldrb	r2, [r7, #15]
 8005df0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 ff35 	bl	8006c68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa86 	bl	8006310 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e12:	e009      	b.n	8005e28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1c:	e004      	b.n	8005e28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f99e 	bl	8006162 <USBD_CtlError>
  }
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	885b      	ldrh	r3, [r3, #2]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	4b4e      	ldr	r3, [pc, #312]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005e46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e48:	4b4d      	ldr	r3, [pc, #308]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d905      	bls.n	8005e5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f985 	bl	8006162 <USBD_CtlError>
    return USBD_FAIL;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e08c      	b.n	8005f76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d002      	beq.n	8005e6e <USBD_SetConfig+0x3e>
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d029      	beq.n	8005ec0 <USBD_SetConfig+0x90>
 8005e6c:	e075      	b.n	8005f5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e6e:	4b44      	ldr	r3, [pc, #272]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d020      	beq.n	8005eb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005e76:	4b42      	ldr	r3, [pc, #264]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e80:	4b3f      	ldr	r3, [pc, #252]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fe ffe3 	bl	8004e52 <USBD_SetClassConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f962 	bl	8006162 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ea6:	e065      	b.n	8005f74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fa31 	bl	8006310 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005eb6:	e05d      	b.n	8005f74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa29 	bl	8006310 <USBD_CtlSendStatus>
      break;
 8005ebe:	e059      	b.n	8005f74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d112      	bne.n	8005eee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005eda:	4b29      	ldr	r3, [pc, #164]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fe ffd2 	bl	8004e8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa12 	bl	8006310 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005eec:	e042      	b.n	8005f74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005eee:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d02a      	beq.n	8005f52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fe ffc0 	bl	8004e8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f14:	4b1a      	ldr	r3, [pc, #104]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fe ff99 	bl	8004e52 <USBD_SetClassConfig>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00f      	beq.n	8005f4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f918 	bl	8006162 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fe ffa5 	bl	8004e8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005f48:	e014      	b.n	8005f74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9e0 	bl	8006310 <USBD_CtlSendStatus>
      break;
 8005f50:	e010      	b.n	8005f74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9dc 	bl	8006310 <USBD_CtlSendStatus>
      break;
 8005f58:	e00c      	b.n	8005f74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f900 	bl	8006162 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f62:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <USBD_SetConfig+0x150>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fe ff8e 	bl	8004e8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	73fb      	strb	r3, [r7, #15]
      break;
 8005f72:	bf00      	nop
  }

  return ret;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000160 	.word	0x20000160

08005f84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	88db      	ldrh	r3, [r3, #6]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d004      	beq.n	8005fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f8e2 	bl	8006162 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f9e:	e023      	b.n	8005fe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	dc02      	bgt.n	8005fb2 <USBD_GetConfig+0x2e>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dc03      	bgt.n	8005fb8 <USBD_GetConfig+0x34>
 8005fb0:	e015      	b.n	8005fde <USBD_GetConfig+0x5a>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d00b      	beq.n	8005fce <USBD_GetConfig+0x4a>
 8005fb6:	e012      	b.n	8005fde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f948 	bl	800625c <USBD_CtlSendData>
        break;
 8005fcc:	e00c      	b.n	8005fe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f940 	bl	800625c <USBD_CtlSendData>
        break;
 8005fdc:	e004      	b.n	8005fe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8be 	bl	8006162 <USBD_CtlError>
        break;
 8005fe6:	bf00      	nop
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006000:	b2db      	uxtb	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	2b02      	cmp	r3, #2
 8006006:	d81e      	bhi.n	8006046 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	88db      	ldrh	r3, [r3, #6]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d004      	beq.n	800601a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8a5 	bl	8006162 <USBD_CtlError>
        break;
 8006018:	e01a      	b.n	8006050 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f043 0202 	orr.w	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	330c      	adds	r3, #12
 800603a:	2202      	movs	r2, #2
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f90c 	bl	800625c <USBD_CtlSendData>
      break;
 8006044:	e004      	b.n	8006050 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f88a 	bl	8006162 <USBD_CtlError>
      break;
 800604e:	bf00      	nop
  }
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	885b      	ldrh	r3, [r3, #2]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d107      	bne.n	800607a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f94c 	bl	8006310 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006078:	e013      	b.n	80060a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	885b      	ldrh	r3, [r3, #2]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d10b      	bne.n	800609a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	889b      	ldrh	r3, [r3, #4]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	b29b      	uxth	r3, r3
 800608a:	b2da      	uxtb	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f93c 	bl	8006310 <USBD_CtlSendStatus>
}
 8006098:	e003      	b.n	80060a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f860 	bl	8006162 <USBD_CtlError>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d80b      	bhi.n	80060da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	885b      	ldrh	r3, [r3, #2]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d10c      	bne.n	80060e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f91c 	bl	8006310 <USBD_CtlSendStatus>
      }
      break;
 80060d8:	e004      	b.n	80060e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f840 	bl	8006162 <USBD_CtlError>
      break;
 80060e2:	e000      	b.n	80060e6 <USBD_ClrFeature+0x3c>
      break;
 80060e4:	bf00      	nop
  }
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff fa40 	bl	800559e <SWAPBYTE>
 800611e:	4603      	mov	r3, r0
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fa33 	bl	800559e <SWAPBYTE>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff fa26 	bl	800559e <SWAPBYTE>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	80da      	strh	r2, [r3, #6]
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800616c:	2180      	movs	r1, #128	@ 0x80
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fd10 	bl	8006b94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006174:	2100      	movs	r1, #0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fd0c 	bl	8006b94 <USBD_LL_StallEP>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d042      	beq.n	8006220 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f000 f842 	bl	8006228 <USBD_GetLen>
 80061a4:	4603      	mov	r3, r0
 80061a6:	3301      	adds	r3, #1
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ae:	d808      	bhi.n	80061c2 <USBD_GetString+0x3e>
 80061b0:	6938      	ldr	r0, [r7, #16]
 80061b2:	f000 f839 	bl	8006228 <USBD_GetLen>
 80061b6:	4603      	mov	r3, r0
 80061b8:	3301      	adds	r3, #1
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	e001      	b.n	80061c6 <USBD_GetString+0x42>
 80061c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	4413      	add	r3, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	3301      	adds	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	4413      	add	r3, r2
 80061e2:	2203      	movs	r2, #3
 80061e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	3301      	adds	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061ec:	e013      	b.n	8006216 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	4413      	add	r3, r2
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	3301      	adds	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
    idx++;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	3301      	adds	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	4413      	add	r3, r2
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006210:	7dfb      	ldrb	r3, [r7, #23]
 8006212:	3301      	adds	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e7      	bne.n	80061ee <USBD_GetString+0x6a>
 800621e:	e000      	b.n	8006222 <USBD_GetString+0x9e>
    return;
 8006220:	bf00      	nop
  }
}
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006238:	e005      	b.n	8006246 <USBD_GetLen+0x1e>
  {
    len++;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	3301      	adds	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3301      	adds	r3, #1
 8006244:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f5      	bne.n	800623a <USBD_GetLen+0x12>
  }

  return len;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2202      	movs	r2, #2
 800626c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	2100      	movs	r1, #0
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fd0f 	bl	8006ca6 <USBD_LL_Transmit>

  return USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	2100      	movs	r1, #0
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fcfe 	bl	8006ca6 <USBD_LL_Transmit>

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2203      	movs	r2, #3
 80062c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	2100      	movs	r1, #0
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fd02 	bl	8006ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	2100      	movs	r1, #0
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fcf1 	bl	8006ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2204      	movs	r2, #4
 800631c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006320:	2300      	movs	r3, #0
 8006322:	2200      	movs	r2, #0
 8006324:	2100      	movs	r1, #0
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fcbd 	bl	8006ca6 <USBD_LL_Transmit>

  return USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2205      	movs	r2, #5
 8006342:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006346:	2300      	movs	r3, #0
 8006348:	2200      	movs	r2, #0
 800634a:	2100      	movs	r1, #0
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fccb 	bl	8006ce8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006360:	2200      	movs	r2, #0
 8006362:	4912      	ldr	r1, [pc, #72]	@ (80063ac <MX_USB_DEVICE_Init+0x50>)
 8006364:	4812      	ldr	r0, [pc, #72]	@ (80063b0 <MX_USB_DEVICE_Init+0x54>)
 8006366:	f7fe fcf7 	bl	8004d58 <USBD_Init>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006370:	f7fa fa18 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006374:	490f      	ldr	r1, [pc, #60]	@ (80063b4 <MX_USB_DEVICE_Init+0x58>)
 8006376:	480e      	ldr	r0, [pc, #56]	@ (80063b0 <MX_USB_DEVICE_Init+0x54>)
 8006378:	f7fe fd1e 	bl	8004db8 <USBD_RegisterClass>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006382:	f7fa fa0f 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006386:	490c      	ldr	r1, [pc, #48]	@ (80063b8 <MX_USB_DEVICE_Init+0x5c>)
 8006388:	4809      	ldr	r0, [pc, #36]	@ (80063b0 <MX_USB_DEVICE_Init+0x54>)
 800638a:	f7fe fc15 	bl	8004bb8 <USBD_CDC_RegisterInterface>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006394:	f7fa fa06 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006398:	4805      	ldr	r0, [pc, #20]	@ (80063b0 <MX_USB_DEVICE_Init+0x54>)
 800639a:	f7fe fd43 	bl	8004e24 <USBD_Start>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80063a4:	f7fa f9fe 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063a8:	bf00      	nop
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200000ac 	.word	0x200000ac
 80063b0:	20000164 	.word	0x20000164
 80063b4:	20000018 	.word	0x20000018
 80063b8:	20000098 	.word	0x20000098

080063bc <CDC_Init_FS>:
  CDC_TransmitCplt_FS
};


static int8_t CDC_Init_FS(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063c0:	2200      	movs	r2, #0
 80063c2:	4905      	ldr	r1, [pc, #20]	@ (80063d8 <CDC_Init_FS+0x1c>)
 80063c4:	4805      	ldr	r0, [pc, #20]	@ (80063dc <CDC_Init_FS+0x20>)
 80063c6:	f7fe fc11 	bl	8004bec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063ca:	4905      	ldr	r1, [pc, #20]	@ (80063e0 <CDC_Init_FS+0x24>)
 80063cc:	4803      	ldr	r0, [pc, #12]	@ (80063dc <CDC_Init_FS+0x20>)
 80063ce:	f7fe fc2f 	bl	8004c30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000c40 	.word	0x20000c40
 80063dc:	20000164 	.word	0x20000164
 80063e0:	20000440 	.word	0x20000440

080063e4 <CDC_DeInit_FS>:

static int8_t CDC_DeInit_FS(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	71fb      	strb	r3, [r7, #7]
 8006400:	4613      	mov	r3, r2
 8006402:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b23      	cmp	r3, #35	@ 0x23
 8006408:	d84a      	bhi.n	80064a0 <CDC_Control_FS+0xac>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <CDC_Control_FS+0x1c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	080064a1 	.word	0x080064a1
 8006414:	080064a1 	.word	0x080064a1
 8006418:	080064a1 	.word	0x080064a1
 800641c:	080064a1 	.word	0x080064a1
 8006420:	080064a1 	.word	0x080064a1
 8006424:	080064a1 	.word	0x080064a1
 8006428:	080064a1 	.word	0x080064a1
 800642c:	080064a1 	.word	0x080064a1
 8006430:	080064a1 	.word	0x080064a1
 8006434:	080064a1 	.word	0x080064a1
 8006438:	080064a1 	.word	0x080064a1
 800643c:	080064a1 	.word	0x080064a1
 8006440:	080064a1 	.word	0x080064a1
 8006444:	080064a1 	.word	0x080064a1
 8006448:	080064a1 	.word	0x080064a1
 800644c:	080064a1 	.word	0x080064a1
 8006450:	080064a1 	.word	0x080064a1
 8006454:	080064a1 	.word	0x080064a1
 8006458:	080064a1 	.word	0x080064a1
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064a1 	.word	0x080064a1
 8006464:	080064a1 	.word	0x080064a1
 8006468:	080064a1 	.word	0x080064a1
 800646c:	080064a1 	.word	0x080064a1
 8006470:	080064a1 	.word	0x080064a1
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a1 	.word	0x080064a1
 8006484:	080064a1 	.word	0x080064a1
 8006488:	080064a1 	.word	0x080064a1
 800648c:	080064a1 	.word	0x080064a1
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064a1 	.word	0x080064a1
 8006498:	080064a1 	.word	0x080064a1
 800649c:	080064a1 	.word	0x080064a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80064a0:	bf00      	nop
  }

  return (USBD_OK);
 80064a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <CDC_Receive_FS>:


static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	480f      	ldr	r0, [pc, #60]	@ (80064fc <CDC_Receive_FS+0x4c>)
 80064be:	f7fe fbb7 	bl	8004c30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064c2:	480e      	ldr	r0, [pc, #56]	@ (80064fc <CDC_Receive_FS+0x4c>)
 80064c4:	f7fe fc12 	bl	8004cec <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0',64);
 80064ce:	2240      	movs	r2, #64	@ 0x40
 80064d0:	2100      	movs	r1, #0
 80064d2:	480b      	ldr	r0, [pc, #44]	@ (8006500 <CDC_Receive_FS+0x50>)
 80064d4:	f000 fc80 	bl	8006dd8 <memset>
  memcpy (buffer, Buf, len);
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	461a      	mov	r2, r3
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	4808      	ldr	r0, [pc, #32]	@ (8006500 <CDC_Receive_FS+0x50>)
 80064e0:	f000 fcb8 	bl	8006e54 <memcpy>
  memset (Buf, '\0',len);
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	461a      	mov	r2, r3
 80064e8:	2100      	movs	r1, #0
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc74 	bl	8006dd8 <memset>
  return (USBD_OK);
 80064f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000164 	.word	0x20000164
 8006500:	2000011c 	.word	0x2000011c

08006504 <CDC_Transmit_FS>:

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006514:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <CDC_Transmit_FS+0x48>)
 8006516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800651a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006526:	2301      	movs	r3, #1
 8006528:	e00b      	b.n	8006542 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800652a:	887b      	ldrh	r3, [r7, #2]
 800652c:	461a      	mov	r2, r3
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4806      	ldr	r0, [pc, #24]	@ (800654c <CDC_Transmit_FS+0x48>)
 8006532:	f7fe fb5b 	bl	8004bec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006536:	4805      	ldr	r0, [pc, #20]	@ (800654c <CDC_Transmit_FS+0x48>)
 8006538:	f7fe fb98 	bl	8004c6c <USBD_CDC_TransmitPacket>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000164 	.word	0x20000164

08006550 <CDC_TransmitCplt_FS>:

static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006566:	4618      	mov	r0, r3
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	6039      	str	r1, [r7, #0]
 800657e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2212      	movs	r2, #18
 8006584:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006586:	4b03      	ldr	r3, [pc, #12]	@ (8006594 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	200000c8 	.word	0x200000c8

08006598 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2204      	movs	r2, #4
 80065a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065aa:	4b03      	ldr	r3, [pc, #12]	@ (80065b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	200000dc 	.word	0x200000dc

080065bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	6039      	str	r1, [r7, #0]
 80065c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d105      	bne.n	80065da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4907      	ldr	r1, [pc, #28]	@ (80065f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80065d2:	4808      	ldr	r0, [pc, #32]	@ (80065f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80065d4:	f7ff fdd6 	bl	8006184 <USBD_GetString>
 80065d8:	e004      	b.n	80065e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80065de:	4805      	ldr	r0, [pc, #20]	@ (80065f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80065e0:	f7ff fdd0 	bl	8006184 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065e4:	4b02      	ldr	r3, [pc, #8]	@ (80065f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20001440 	.word	0x20001440
 80065f4:	08006f20 	.word	0x08006f20

080065f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	6039      	str	r1, [r7, #0]
 8006602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	4904      	ldr	r1, [pc, #16]	@ (8006618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006608:	4804      	ldr	r0, [pc, #16]	@ (800661c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800660a:	f7ff fdbb 	bl	8006184 <USBD_GetString>
  return USBD_StrDesc;
 800660e:	4b02      	ldr	r3, [pc, #8]	@ (8006618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20001440 	.word	0x20001440
 800661c:	08006f34 	.word	0x08006f34

08006620 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	221a      	movs	r2, #26
 8006630:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006632:	f000 f843 	bl	80066bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006636:	4b02      	ldr	r3, [pc, #8]	@ (8006640 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200000e0 	.word	0x200000e0

08006644 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	6039      	str	r1, [r7, #0]
 800664e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	4907      	ldr	r1, [pc, #28]	@ (8006678 <USBD_FS_ConfigStrDescriptor+0x34>)
 800665a:	4808      	ldr	r0, [pc, #32]	@ (800667c <USBD_FS_ConfigStrDescriptor+0x38>)
 800665c:	f7ff fd92 	bl	8006184 <USBD_GetString>
 8006660:	e004      	b.n	800666c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4904      	ldr	r1, [pc, #16]	@ (8006678 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006666:	4805      	ldr	r0, [pc, #20]	@ (800667c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006668:	f7ff fd8c 	bl	8006184 <USBD_GetString>
  }
  return USBD_StrDesc;
 800666c:	4b02      	ldr	r3, [pc, #8]	@ (8006678 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20001440 	.word	0x20001440
 800667c:	08006f48 	.word	0x08006f48

08006680 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	6039      	str	r1, [r7, #0]
 800668a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d105      	bne.n	800669e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4907      	ldr	r1, [pc, #28]	@ (80066b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006696:	4808      	ldr	r0, [pc, #32]	@ (80066b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006698:	f7ff fd74 	bl	8006184 <USBD_GetString>
 800669c:	e004      	b.n	80066a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	4904      	ldr	r1, [pc, #16]	@ (80066b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066a2:	4805      	ldr	r0, [pc, #20]	@ (80066b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066a4:	f7ff fd6e 	bl	8006184 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066a8:	4b02      	ldr	r3, [pc, #8]	@ (80066b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20001440 	.word	0x20001440
 80066b8:	08006f54 	.word	0x08006f54

080066bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80066c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006700 <Get_SerialNum+0x44>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80066c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <Get_SerialNum+0x48>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80066ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006708 <Get_SerialNum+0x4c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80066e2:	2208      	movs	r2, #8
 80066e4:	4909      	ldr	r1, [pc, #36]	@ (800670c <Get_SerialNum+0x50>)
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f814 	bl	8006714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80066ec:	2204      	movs	r2, #4
 80066ee:	4908      	ldr	r1, [pc, #32]	@ (8006710 <Get_SerialNum+0x54>)
 80066f0:	68b8      	ldr	r0, [r7, #8]
 80066f2:	f000 f80f 	bl	8006714 <IntToUnicode>
  }
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	1fff7a10 	.word	0x1fff7a10
 8006704:	1fff7a14 	.word	0x1fff7a14
 8006708:	1fff7a18 	.word	0x1fff7a18
 800670c:	200000e2 	.word	0x200000e2
 8006710:	200000f2 	.word	0x200000f2

08006714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]
 800672a:	e027      	b.n	800677c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	0f1b      	lsrs	r3, r3, #28
 8006730:	2b09      	cmp	r3, #9
 8006732:	d80b      	bhi.n	800674c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	0f1b      	lsrs	r3, r3, #28
 8006738:	b2da      	uxtb	r2, r3
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4619      	mov	r1, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	440b      	add	r3, r1
 8006744:	3230      	adds	r2, #48	@ 0x30
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e00a      	b.n	8006762 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	0f1b      	lsrs	r3, r3, #28
 8006750:	b2da      	uxtb	r2, r3
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	4619      	mov	r1, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	440b      	add	r3, r1
 800675c:	3237      	adds	r2, #55	@ 0x37
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	3301      	adds	r3, #1
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	3301      	adds	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
 800677c:	7dfa      	ldrb	r2, [r7, #23]
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	d3d3      	bcc.n	800672c <IntToUnicode+0x18>
  }
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	@ 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067b4:	d147      	bne.n	8006846 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b6:	2300      	movs	r3, #0
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	4b25      	ldr	r3, [pc, #148]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067be:	4a24      	ldr	r2, [pc, #144]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80067c6:	4b22      	ldr	r3, [pc, #136]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80067d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	4619      	mov	r1, r3
 80067e6:	481b      	ldr	r0, [pc, #108]	@ (8006854 <HAL_PCD_MspInit+0xc0>)
 80067e8:	f7fa fa26 	bl	8000c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80067ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80067f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f2:	2302      	movs	r3, #2
 80067f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067fa:	2300      	movs	r3, #0
 80067fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80067fe:	230a      	movs	r3, #10
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006802:	f107 0314 	add.w	r3, r7, #20
 8006806:	4619      	mov	r1, r3
 8006808:	4812      	ldr	r0, [pc, #72]	@ (8006854 <HAL_PCD_MspInit+0xc0>)
 800680a:	f7fa fa15 	bl	8000c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800680e:	4b10      	ldr	r3, [pc, #64]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 8006810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006812:	4a0f      	ldr	r2, [pc, #60]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 8006814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006818:	6353      	str	r3, [r2, #52]	@ 0x34
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	4a0b      	ldr	r2, [pc, #44]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 8006824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006828:	6453      	str	r3, [r2, #68]	@ 0x44
 800682a:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <HAL_PCD_MspInit+0xbc>)
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006836:	2200      	movs	r2, #0
 8006838:	2100      	movs	r1, #0
 800683a:	2043      	movs	r0, #67	@ 0x43
 800683c:	f7fa f9c5 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006840:	2043      	movs	r0, #67	@ 0x43
 8006842:	f7fa f9de 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006846:	bf00      	nop
 8006848:	3728      	adds	r7, #40	@ 0x28
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40023800 	.word	0x40023800
 8006854:	40020000 	.word	0x40020000

08006858 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fe fb25 	bl	8004ebe <USBD_LL_SetupStage>
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f7fe fb5f 	bl	8004f68 <USBD_LL_DataOutStage>
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	3320      	adds	r3, #32
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	4619      	mov	r1, r3
 80068da:	f7fe fbf8 	bl	80050ce <USBD_LL_DataInStage>
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fd32 	bl	800535e <USBD_LL_SOF>
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	79db      	ldrb	r3, [r3, #7]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
 800691a:	e008      	b.n	800692e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	79db      	ldrb	r3, [r3, #7]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d102      	bne.n	800692a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	e001      	b.n	800692e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800692a:	f7f9 ff3b 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006934:	7bfa      	ldrb	r2, [r7, #15]
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fccc 	bl	80052d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fc74 	bl	8005232 <USBD_LL_Reset>
}
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fcc7 	bl	80052f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7adb      	ldrb	r3, [r3, #11]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <HAL_PCD_SuspendCallback+0x48>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	4a03      	ldr	r2, [pc, #12]	@ (800699c <HAL_PCD_SuspendCallback+0x48>)
 800698e:	f043 0306 	orr.w	r3, r3, #6
 8006992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fcbd 	bl	800532e <USBD_LL_Resume>
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fd15 	bl	8005402 <USBD_LL_IsoOUTIncomplete>
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe fcd1 	bl	800539e <USBD_LL_IsoINIncomplete>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fd27 	bl	8005466 <USBD_LL_DevConnected>
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fd24 	bl	800547c <USBD_LL_DevDisconnected>
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d13c      	bne.n	8006ac6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006a4c:	4a20      	ldr	r2, [pc, #128]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006a62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a64:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a66:	2204      	movs	r2, #4
 8006a68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006a6a:	4b19      	ldr	r3, [pc, #100]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a70:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a76:	4b16      	ldr	r3, [pc, #88]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a78:	2202      	movs	r2, #2
 8006a7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006a7c:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006a82:	4b13      	ldr	r3, [pc, #76]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a88:	4b11      	ldr	r3, [pc, #68]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a9a:	480d      	ldr	r0, [pc, #52]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006a9c:	f7fa fa81 	bl	8000fa2 <HAL_PCD_Init>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006aa6:	f7f9 fe7d 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006aaa:	2180      	movs	r1, #128	@ 0x80
 8006aac:	4808      	ldr	r0, [pc, #32]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006aae:	f7fb fcae 	bl	800240e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ab2:	2240      	movs	r2, #64	@ 0x40
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4806      	ldr	r0, [pc, #24]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006ab8:	f7fb fc62 	bl	8002380 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006abc:	2280      	movs	r2, #128	@ 0x80
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4803      	ldr	r0, [pc, #12]	@ (8006ad0 <USBD_LL_Init+0x94>)
 8006ac2:	f7fb fc5d 	bl	8002380 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20001640 	.word	0x20001640

08006ad4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa fb68 	bl	80011c0 <HAL_PCD_Start>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f942 	bl	8006d80 <USBD_Get_USB_Status>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	461a      	mov	r2, r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	70fb      	strb	r3, [r7, #3]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70bb      	strb	r3, [r7, #2]
 8006b20:	4613      	mov	r3, r2
 8006b22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b32:	78bb      	ldrb	r3, [r7, #2]
 8006b34:	883a      	ldrh	r2, [r7, #0]
 8006b36:	78f9      	ldrb	r1, [r7, #3]
 8006b38:	f7fb f83c 	bl	8001bb4 <HAL_PCD_EP_Open>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f91c 	bl	8006d80 <USBD_Get_USB_Status>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	4611      	mov	r1, r2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fb f887 	bl	8001c88 <HAL_PCD_EP_Close>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 f8fd 	bl	8006d80 <USBD_Get_USB_Status>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fb f93f 	bl	8001e36 <HAL_PCD_EP_SetStall>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f8de 	bl	8006d80 <USBD_Get_USB_Status>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fb f983 	bl	8001efc <HAL_PCD_EP_ClrStall>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f8bf 	bl	8006d80 <USBD_Get_USB_Status>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da0b      	bge.n	8006c44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	4613      	mov	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3316      	adds	r3, #22
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	e00b      	b.n	8006c5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006c5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fa ff70 	bl	8001b6c <HAL_PCD_SetAddress>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f874 	bl	8006d80 <USBD_Get_USB_Status>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006cc4:	7af9      	ldrb	r1, [r7, #11]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	f7fb f87a 	bl	8001dc2 <HAL_PCD_EP_Transmit>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f853 	bl	8006d80 <USBD_Get_USB_Status>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006cde:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006d06:	7af9      	ldrb	r1, [r7, #11]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	f7fb f806 	bl	8001d1c <HAL_PCD_EP_Receive>
 8006d10:	4603      	mov	r3, r0
 8006d12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f832 	bl	8006d80 <USBD_Get_USB_Status>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d20:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fb f826 	bl	8001d92 <HAL_PCD_EP_GetRxCount>
 8006d46:	4603      	mov	r3, r0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d58:	4b03      	ldr	r3, [pc, #12]	@ (8006d68 <USBD_static_malloc+0x18>)
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20001b24 	.word	0x20001b24

08006d6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d817      	bhi.n	8006dc4 <USBD_Get_USB_Status+0x44>
 8006d94:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <USBD_Get_USB_Status+0x1c>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006db3 	.word	0x08006db3
 8006da4:	08006db9 	.word	0x08006db9
 8006da8:	08006dbf 	.word	0x08006dbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
    break;
 8006db0:	e00b      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
    break;
 8006db6:	e008      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006db8:	2301      	movs	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
    break;
 8006dbc:	e005      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc2:	e002      	b.n	8006dca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc8:	bf00      	nop
  }
  return usb_status;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <memset>:
 8006dd8:	4402      	add	r2, r0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d100      	bne.n	8006de2 <memset+0xa>
 8006de0:	4770      	bx	lr
 8006de2:	f803 1b01 	strb.w	r1, [r3], #1
 8006de6:	e7f9      	b.n	8006ddc <memset+0x4>

08006de8 <strncmp>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	b16a      	cbz	r2, 8006e08 <strncmp+0x20>
 8006dec:	3901      	subs	r1, #1
 8006dee:	1884      	adds	r4, r0, r2
 8006df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d103      	bne.n	8006e04 <strncmp+0x1c>
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	d001      	beq.n	8006e04 <strncmp+0x1c>
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d1f5      	bne.n	8006df0 <strncmp+0x8>
 8006e04:	1ad0      	subs	r0, r2, r3
 8006e06:	bd10      	pop	{r4, pc}
 8006e08:	4610      	mov	r0, r2
 8006e0a:	e7fc      	b.n	8006e06 <strncmp+0x1e>

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e44 <__libc_init_array+0x38>)
 8006e10:	4c0d      	ldr	r4, [pc, #52]	@ (8006e48 <__libc_init_array+0x3c>)
 8006e12:	1b64      	subs	r4, r4, r5
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	2600      	movs	r6, #0
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e4c <__libc_init_array+0x40>)
 8006e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e50 <__libc_init_array+0x44>)
 8006e20:	f000 f826 	bl	8006e70 <_init>
 8006e24:	1b64      	subs	r4, r4, r5
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	2600      	movs	r6, #0
 8006e2a:	42a6      	cmp	r6, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e34:	4798      	blx	r3
 8006e36:	3601      	adds	r6, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3e:	4798      	blx	r3
 8006e40:	3601      	adds	r6, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08006f7c 	.word	0x08006f7c
 8006e48:	08006f7c 	.word	0x08006f7c
 8006e4c:	08006f7c 	.word	0x08006f7c
 8006e50:	08006f80 	.word	0x08006f80

08006e54 <memcpy>:
 8006e54:	440a      	add	r2, r1
 8006e56:	4291      	cmp	r1, r2
 8006e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e5c:	d100      	bne.n	8006e60 <memcpy+0xc>
 8006e5e:	4770      	bx	lr
 8006e60:	b510      	push	{r4, lr}
 8006e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6a:	4291      	cmp	r1, r2
 8006e6c:	d1f9      	bne.n	8006e62 <memcpy+0xe>
 8006e6e:	bd10      	pop	{r4, pc}

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
